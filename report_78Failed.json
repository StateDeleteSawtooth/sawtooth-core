{"created": 1552471696.2042224, "duration": 4700.485417366028, "exitcode": 1, "root": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test", "environment": {"Python": "3.6.7", "Platform": "Linux-4.15.0-46-generic-x86_64-with-Ubuntu-18.04-bionic", "Packages": {"pytest": "4.3.1", "py": "1.8.0", "pluggy": "0.9.0"}, "Plugins": {"ordering": "0.6", "metadata": "1.8.0", "json-report": "1.0.3", "aiohttp": "0.3.0"}}, "summary": {"failed": 78, "passed": 62, "total": 140}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "dep_txns/test_rest_api_dep_txns.py", "type": "Module"}, {"nodeid": "get/test_rest_api_get_batch.py", "type": "Module"}, {"nodeid": "get/test_rest_api_get_block.py", "type": "Module"}, {"nodeid": "get/test_rest_api_get_peers.py", "type": "Module"}, {"nodeid": "get/test_rest_api_get_receipts.py", "type": "Module"}, {"nodeid": "get/test_rest_api_get_state.py", "type": "Module"}, {"nodeid": "get/test_rest_api_get_transaction.py", "type": "Module"}, {"nodeid": "post/test_rest_api_post.py", "type": "Module"}, {"nodeid": "scenario/test_rest_api_scenario.py", "type": "Module"}]}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies", "outcome": "passed", "result": [{"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_set_inc_txn_dep", "type": "Function", "lineno": 102}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_rest_api_double_dep_txns", "type": "Function", "lineno": 200}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_single_set_dep_txns", "type": "Function", "lineno": 310}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_rest_api_single_set_dec_txns", "type": "Function", "lineno": 421}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_rest_api_set_inc_inc_Txns_Dep", "type": "Function", "lineno": 522}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_rest_api_single_set_dec_same_txns", "type": "Function", "lineno": 632}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_rest_api_single_set_dec_invalid_txns_id", "type": "Function", "lineno": 741}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_single_set_dep_reverse", "type": "Function", "lineno": 849}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_valid_set_invalid_inc_txn_dep", "type": "Function", "lineno": 955}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_valid_set_invalid_inc_DiffKey_txn_dep", "type": "Function", "lineno": 1033}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_set_Max_txn_dep", "type": "Function", "lineno": 1115}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_invalid_set_txn_dep", "type": "Function", "lineno": 1195}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_invalid_Address_txn_dep", "type": "Function", "lineno": 1274}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_Multiple_Indep_Txn_txn_dep", "type": "Function", "lineno": 1377}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_inc_first_txn_dep", "type": "Function", "lineno": 1484}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_Multiple_dep_Txn_Consecutive_dep", "type": "Function", "lineno": 1575}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_Multiple_invalid_dep_Txn_Consecutive_dep", "type": "Function", "lineno": 1678}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_separate_batch_txn_dep", "type": "Function", "lineno": 1782}]}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies", "outcome": "passed", "result": [{"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies", "type": "Instance"}]}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py", "outcome": "passed", "result": [{"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies", "type": "Class"}]}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list", "type": "Function", "lineno": 92}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_head", "type": "Function", "lineno": 134}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_bad_head", "type": "Function", "lineno": 171}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_id", "type": "Function", "lineno": 187}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_bad_id", "type": "Function", "lineno": 227}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_head_and_id", "type": "Function", "lineno": 243}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_paginated_batch_list", "type": "Function", "lineno": 283}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_limit", "type": "Function", "lineno": 303}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_invalid_start", "type": "Function", "lineno": 341}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_invalid_limit", "type": "Function", "lineno": 361}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_reversed", "type": "Function", "lineno": 380}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_key_params", "type": "Function", "lineno": 422}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_param_link_val", "type": "Function", "lineno": 438}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_rest_api_check_batches_count", "type": "Function", "lineno": 458}]}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_batch.py::TestBatchList", "type": "Instance"}]}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchGet", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_batch.py::TestBatchGet::test_api_get_batch_id", "type": "Function", "lineno": 474}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchGet::test_api_get_bad_batch_id", "type": "Function", "lineno": 505}]}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchGet", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_batch.py::TestBatchGet", "type": "Instance"}]}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_post_batch_status_15ids", "type": "Function", "lineno": 522}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_post_batch_status_10ids", "type": "Function", "lineno": 540}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses", "type": "Function", "lineno": 558}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses_many_ids", "type": "Function", "lineno": 580}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses_bad_id", "type": "Function", "lineno": 604}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses_invalid_query", "type": "Function", "lineno": 623}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses_wait", "type": "Function", "lineno": 640}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses_invalid", "type": "Function", "lineno": 666}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses_unknown", "type": "Function", "lineno": 687}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses_default_wait", "type": "Function", "lineno": 710}]}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList", "type": "Instance"}]}, {"nodeid": "get/test_rest_api_get_batch.py", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_batch.py::TestBatchList", "type": "Class"}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchGet", "type": "Class"}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList", "type": "Class"}]}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list", "type": "Function", "lineno": 82}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_head", "type": "Function", "lineno": 114}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_bad_head", "type": "Function", "lineno": 133}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_id", "type": "Function", "lineno": 149}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_bad_id", "type": "Function", "lineno": 183}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_paginated_block_list", "type": "Function", "lineno": 201}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_limit", "type": "Function", "lineno": 221}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_invalid_start", "type": "Function", "lineno": 250}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_invalid_limit", "type": "Function", "lineno": 270}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_reversed", "type": "Function", "lineno": 290}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_link_val", "type": "Function", "lineno": 314}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_key_params", "type": "Function", "lineno": 334}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_each_block_batch_id_length", "type": "Function", "lineno": 351}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_first_block_id_length", "type": "Function", "lineno": 368}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_rest_api_check_post_max_batches", "type": "Function", "lineno": 387}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_rest_api_check_head_signature", "type": "Function", "lineno": 406}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_rest_api_check_family_version", "type": "Function", "lineno": 425}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_rest_api_check_input_output_content", "type": "Function", "lineno": 443}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_rest_api_check_signer_public_key", "type": "Function", "lineno": 462}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_rest_api_check_blocks_count", "type": "Function", "lineno": 479}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_rest_api_blk_content_head_signature", "type": "Function", "lineno": 495}]}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_block.py::TestBlockList", "type": "Instance"}]}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockGet", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_block.py::TestBlockGet::test_api_get_block_id", "type": "Function", "lineno": 517}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockGet::test_api_get_bad_block_id", "type": "Function", "lineno": 543}]}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockGet", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_block.py::TestBlockGet", "type": "Instance"}]}, {"nodeid": "get/test_rest_api_get_block.py", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_block.py::TestBlockList", "type": "Class"}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockGet", "type": "Class"}]}, {"nodeid": "get/test_rest_api_get_peers.py::TestPeerList", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_peers.py::TestPeerList::test_api_get_peer_list", "type": "Function", "lineno": 49}]}, {"nodeid": "get/test_rest_api_get_peers.py::TestPeerList", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_peers.py::TestPeerList", "type": "Instance"}]}, {"nodeid": "get/test_rest_api_get_peers.py", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_peers.py::TestPeerList", "type": "Class"}]}, {"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList::test_api_get_reciept_invalid_id", "type": "Function", "lineno": 57}, {"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList::test_api_get_reciepts_multiple_transactions", "type": "Function", "lineno": 73}, {"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList::test_api_get_reciepts_single_transactions", "type": "Function", "lineno": 98}, {"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList::test_api_post_reciepts_single_transactions", "type": "Function", "lineno": 113}, {"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList::test_api_post_reciepts_invalid_transactions", "type": "Function", "lineno": 130}, {"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList::test_api_post_reciepts_multiple_transactions", "type": "Function", "lineno": 146}]}, {"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList", "type": "Instance"}]}, {"nodeid": "get/test_rest_api_get_receipts.py", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList", "type": "Class"}]}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list", "type": "Function", "lineno": 86}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_head", "type": "Function", "lineno": 107}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_invalid_batch", "type": "Function", "lineno": 130}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_bad_head", "type": "Function", "lineno": 143}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_address", "type": "Function", "lineno": 162}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_bad_address", "type": "Function", "lineno": 180}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_paginated_state_list", "type": "Function", "lineno": 196}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_paginated_state_list_limit", "type": "Function", "lineno": 216}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_paginated_state_list_start", "type": "Function", "lineno": 235}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_bad_paging", "type": "Function", "lineno": 254}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_invalid_start", "type": "Function", "lineno": 274}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_invalid_limit", "type": "Function", "lineno": 294}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_reversed", "type": "Function", "lineno": 313}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_address_prefix_namespace", "type": "Function", "lineno": 335}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_head_wildcard_character", "type": "Function", "lineno": 353}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_head_partial_character", "type": "Function", "lineno": 374}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_address_partial_character", "type": "Function", "lineno": 390}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_address_length", "type": "Function", "lineno": 407}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_address_with_odd_hex_value", "type": "Function", "lineno": 426}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_address_with_reduced_length", "type": "Function", "lineno": 445}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_address_64_Hex", "type": "Function", "lineno": 464}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_address_alter_bytes", "type": "Function", "lineno": 484}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_link_val", "type": "Function", "lineno": 506}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_key_params", "type": "Function", "lineno": 526}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_each_state_head_length", "type": "Function", "lineno": 543}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_rest_api_check_state_count", "type": "Function", "lineno": 560}]}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_state.py::TestStateList", "type": "Instance"}]}, {"nodeid": "get/test_rest_api_get_state.py::TestStateGet", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_state.py::TestStateGet::test_api_get_state_address", "type": "Function", "lineno": 579}, {"nodeid": "get/test_rest_api_get_state.py::TestStateGet::test_api_get_bad_address", "type": "Function", "lineno": 592}]}, {"nodeid": "get/test_rest_api_get_state.py::TestStateGet", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_state.py::TestStateGet", "type": "Instance"}]}, {"nodeid": "get/test_rest_api_get_state.py::TestStateDeleteRoot", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_state.py::TestStateDeleteRoot::test_api_get_state_delete_root", "type": "Function", "lineno": 607}, {"nodeid": "get/test_rest_api_get_state.py::TestStateDeleteRoot::test_api_get_state_delete_not_root_node", "type": "Function", "lineno": 630}]}, {"nodeid": "get/test_rest_api_get_state.py::TestStateDeleteRoot", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_state.py::TestStateDeleteRoot", "type": "Instance"}]}, {"nodeid": "get/test_rest_api_get_state.py", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_state.py::TestStateList", "type": "Class"}, {"nodeid": "get/test_rest_api_get_state.py::TestStateGet", "type": "Class"}, {"nodeid": "get/test_rest_api_get_state.py::TestStateDeleteRoot", "type": "Class"}]}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list", "type": "Function", "lineno": 74}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_head", "type": "Function", "lineno": 110}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_bad_head", "type": "Function", "lineno": 144}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_id", "type": "Function", "lineno": 160}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_bad_id", "type": "Function", "lineno": 196}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_head_and_id", "type": "Function", "lineno": 212}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_paginated_transaction_list", "type": "Function", "lineno": 249}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_limit", "type": "Function", "lineno": 271}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_bad_paging", "type": "Function", "lineno": 310}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_invalid_start", "type": "Function", "lineno": 326}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_invalid_limit", "type": "Function", "lineno": 342}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_reversed", "type": "Function", "lineno": 359}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transactions_link_val", "type": "Function", "lineno": 391}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transactions_key_params", "type": "Function", "lineno": 410}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_id_length", "type": "Function", "lineno": 426}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_rest_api_check_transactions_count", "type": "Function", "lineno": 442}]}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList", "type": "Instance"}]}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionGet", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionGet::test_api_get_transaction_id", "type": "Function", "lineno": 458}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionGet::test_api_get_transaction_bad_id", "type": "Function", "lineno": 486}]}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionGet", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionGet", "type": "Instance"}]}, {"nodeid": "get/test_rest_api_get_transaction.py", "outcome": "passed", "result": [{"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList", "type": "Class"}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionGet", "type": "Class"}]}, {"nodeid": "post/test_rest_api_post.py::TestPostList", "outcome": "passed", "result": [{"nodeid": "post/test_rest_api_post.py::TestPostList::test_rest_api_post_batch", "type": "Function", "lineno": 124}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_rest_api_no_batches", "type": "Function", "lineno": 206}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_rest_api_bad_protobuf", "type": "Function", "lineno": 224}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_rest_api_post_wrong_header", "type": "Function", "lineno": 243}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_rest_api_post_same_txns", "type": "Function", "lineno": 299}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_rest_api_multiple_txns_batches", "type": "Function", "lineno": 353}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_api_post_empty_trxns_list", "type": "Function", "lineno": 436}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_api_post_batch_different_signer", "type": "Function", "lineno": 456}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_rest_api_post_no_endpoint", "type": "Function", "lineno": 481}]}, {"nodeid": "post/test_rest_api_post.py::TestPostList", "outcome": "passed", "result": [{"nodeid": "post/test_rest_api_post.py::TestPostList", "type": "Instance"}]}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns", "outcome": "passed", "result": [{"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_invalid_addr", "type": "Function", "lineno": 505}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_invalid_min", "type": "Function", "lineno": 517}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_invalid_max", "type": "Function", "lineno": 529}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_valid_invalid_txns", "type": "Function", "lineno": 541}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_invalid_valid_txns", "type": "Function", "lineno": 553}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_same_txns", "type": "Function", "lineno": 565}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_api_sent_commit_txns", "type": "Function", "lineno": 577}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_invalid_bad_addr", "type": "Function", "lineno": 595}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_invalid_family_name", "type": "Function", "lineno": 606}]}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns", "outcome": "passed", "result": [{"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns", "type": "Instance"}]}, {"nodeid": "post/test_rest_api_post.py", "outcome": "passed", "result": [{"nodeid": "post/test_rest_api_post.py::TestPostList", "type": "Class"}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns", "type": "Class"}]}, {"nodeid": "scenario/test_rest_api_scenario.py", "outcome": "passed", "result": []}], "tests": [{"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list", "lineno": 74, "outcome": "failed", "keywords": ["first", "get/test_rest_api_get_transaction.py", "run", "transactions", "test_api_get_transaction_list", "api_test", "()", "get", "TestTransactionList"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 162.0799057483673, "outcome": "passed", "log": [{"name": "conftest", "msg": "Starting Setup method for posting batches using intkey as payload", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/conftest.py", "filename": "conftest.py", "module": "conftest", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 36, "funcName": "setup", "created": 1552466995.818818, "msecs": 818.8180923461914, "relativeCreated": 419.13723945617676, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:19:55"}, {"name": "payload", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 73, "funcName": "_create_transactions", "created": 1552466995.8214133, "msecs": 821.4132785797119, "relativeCreated": 421.73242568969727, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:19:55"}, {"name": "payload", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 79, "funcName": "_create_batches", "created": 1552466995.8353512, "msecs": 835.3512287139893, "relativeCreated": 435.6703758239746, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:19:55"}, {"name": "payload", "msg": "Gathering expected data before submission of batches", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 168, "funcName": "_expected_data", "created": 1552466995.8356483, "msecs": 835.6482982635498, "relativeCreated": 435.96744537353516, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:19:55"}, {"name": "payload", "msg": "Calculating the expected count of batches, transactions, state", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 155, "funcName": "_expected_count", "created": 1552466995.83571, "msecs": 835.7100486755371, "relativeCreated": 436.02919578552246, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:19:55"}, {"name": "payload", "msg": "Calculating the initial count of batches,transactions, state before submission of batches", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 146, "funcName": "_initial_count", "created": 1552466995.835754, "msecs": 835.7539176940918, "relativeCreated": 436.07306480407715, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:19:55"}, {"name": "payload", "msg": "Expected transaction ids", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 111, "funcName": "_expected_txn_ids", "created": 1552467154.2242048, "msecs": 224.20477867126465, "relativeCreated": 158824.52392578125, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:34"}, {"name": "payload", "msg": "Expected batch ids", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 97, "funcName": "_expected_batch_ids", "created": 1552467154.2245855, "msecs": 224.58553314208984, "relativeCreated": 158824.90468025208, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:34"}, {"name": "payload", "msg": "Expected transaction ids", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 111, "funcName": "_expected_txn_ids", "created": 1552467154.2247593, "msecs": 224.75934028625488, "relativeCreated": 158825.07848739624, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:34"}, {"name": "payload", "msg": "Expected batch ids", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 97, "funcName": "_expected_batch_ids", "created": 1552467154.22484, "msecs": 224.8399257659912, "relativeCreated": 158825.15907287598, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:34"}, {"name": "payload", "msg": "Expected batch ids", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 97, "funcName": "_expected_batch_ids", "created": 1552467157.6756232, "msecs": 675.6231784820557, "relativeCreated": 162275.94232559204, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:37"}]}, "call": {"duration": 0.0010578632354736328, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_transaction.py", "lineno": 97, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_transaction.TestTransactionList object at 0x7f3e32023240>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_transaction_list(self, setup):\n        \"\"\"Tests the transaction list after submitting intkey batches\n        \"\"\"\n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_txns = setup['expected_txns']\n        expected_length = setup['expected_trn_length']\n        payload = setup['payload']\n        address = setup['address']\n        start = setup['start']\n        limit = setup['limit']\n        start = expected_txns[0]\n    \n        expected_link = '{}/transactions?head={}&start={}&limit={}'.format(address,\\\n                         expected_head, start, limit)\n    \n        paging_link = '{}/transactions?head={}&start={}'.format(address,\\\n                         expected_head, start)\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/transactions'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_transaction.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e336f4d68>, url = 'http://192.168.1.23:8008/transactions', allow_redirects = True\nkwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002868175506591797, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_head", "lineno": 110, "outcome": "failed", "keywords": ["first", "run", "transactions", "TestTransactionList", "test_api_get_transaction_list_head", "api_test", "()", "get", "get/test_rest_api_get_transaction.py"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.00043511390686035156, "outcome": "passed"}, "call": {"duration": 0.0006005764007568359, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_transaction.py", "lineno": 132, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_transaction", "msg": "Starting test for transactions with head parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_transaction.py", "filename": "test_rest_api_get_transaction.py", "module": "test_rest_api_get_transaction", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 114, "funcName": "test_api_get_transaction_list_head", "created": 1552467157.9452643, "msecs": 945.2643394470215, "relativeCreated": 162545.583486557, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:37"}], "longrepr": "self = <test_rest_api_get_transaction.TestTransactionList object at 0x7f3e31f48898>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_transaction_list_head(self, setup):\n        \"\"\"Tests that GET /transactions is reachable with head parameter\n        \"\"\"\n        LOGGER.info(\"Starting test for transactions with head parameter\")\n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_txns = setup['expected_txns']\n        expected_length = setup['expected_trn_length']\n        payload = setup['payload'][0]\n        address = setup['address']\n        start = expected_txns[0]\n        limit = setup['limit']\n    \n        expected_link = '{}/transactions?head={}&start={}&limit={}'.format(address,\\\n                         expected_head, start, limit)\n    \n        params={'head': expected_head}\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/transactions'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_transaction.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e1bba8>, url = 'http://192.168.1.23:8008/transactions', allow_redirects = True\nkwargs = {'params': {'head': 'f940acd87fa0e6851afd942a3855ad8883d2adfedc708c552fb26cdc9307a0c578d1dc27b3e2d4a3336dd4e8ea8704e61948ac47db4236c39ecc8f30f385047b'}, 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024127960205078125, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_bad_head", "lineno": 144, "outcome": "passed", "keywords": ["test_api_get_transaction_list_bad_head", "first", "run", "transactions", "TestTransactionList", "api_test", "()", "get", "get/test_rest_api_get_transaction.py"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.0004203319549560547, "outcome": "passed"}, "call": {"duration": 0.01582956314086914, "outcome": "passed", "log": [{"name": "test_rest_api_get_transaction", "msg": "Starting test for transactions with bad head parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_transaction.py", "filename": "test_rest_api_get_transaction.py", "module": "test_rest_api_get_transaction", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 148, "funcName": "test_api_get_transaction_list_bad_head", "created": 1552467157.963336, "msecs": 963.3359909057617, "relativeCreated": 162563.65513801575, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:37"}]}, "teardown": {"duration": 0.0002224445343017578, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_id", "lineno": 160, "outcome": "failed", "keywords": ["first", "get/test_rest_api_get_transaction.py", "test_api_get_transaction_list_id", "transactions", "run", "api_test", "()", "get", "TestTransactionList"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.0004162788391113281, "outcome": "passed"}, "call": {"duration": 0.0005087852478027344, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_transaction.py", "lineno": 186, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_transaction", "msg": "Starting test for transactions with id parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_transaction.py", "filename": "test_rest_api_get_transaction.py", "module": "test_rest_api_get_transaction", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 164, "funcName": "test_api_get_transaction_list_id", "created": 1552467157.9805305, "msecs": 980.5305004119873, "relativeCreated": 162580.84964752197, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:37"}], "longrepr": "self = <test_rest_api_get_transaction.TestTransactionList object at 0x7f3e32210fd0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_transaction_list_id(self, setup):\n        \"\"\"Tests that GET /transactions is reachable with id as parameter\n        \"\"\"\n        LOGGER.info(\"Starting test for transactions with id parameter\")\n    \n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_txns = setup['expected_txns']\n        expected_length = setup['expected_trn_length']\n        payload = setup['payload'][0]\n        address = setup['address']\n        start = expected_txns[0]\n        transaction_ids   =  setup['transaction_ids']\n        expected_id = transaction_ids[0]\n        expected_length = len([expected_id])\n        limit = setup['limit']\n    \n        expected_link = '{}/transactions?head={}&start={}&limit={}&id={}'.format(address,\\\n                         expected_head, start, limit, expected_id)\n    \n        params={'id': expected_id}\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/transactions'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_transaction.py:186: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e1ba20>, url = 'http://192.168.1.23:8008/transactions', allow_redirects = True\nkwargs = {'params': {'id': '48b9377946f0f8cade989d3bf15538d0d9c959f46a370182b8969033cc32858d5b9bbe382e34d37032a5fcf7d3d63fb31d8ef4f4b44b53f78cf975f46856af77'}, 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00026535987854003906, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_bad_id", "lineno": 196, "outcome": "passed", "keywords": ["test_api_get_transaction_list_bad_id", "first", "run", "transactions", "TestTransactionList", "api_test", "()", "get", "get/test_rest_api_get_transaction.py"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.00042319297790527344, "outcome": "passed"}, "call": {"duration": 0.014125823974609375, "outcome": "passed", "log": [{"name": "test_rest_api_get_transaction", "msg": "Starting test for transactions with bad id parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_transaction.py", "filename": "test_rest_api_get_transaction.py", "module": "test_rest_api_get_transaction", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 200, "funcName": "test_api_get_transaction_list_bad_id", "created": 1552467157.9986403, "msecs": 998.6402988433838, "relativeCreated": 162598.95944595337, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:37"}]}, "teardown": {"duration": 0.0002307891845703125, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_head_and_id", "lineno": 212, "outcome": "failed", "keywords": ["first", "test_api_get_transaction_list_head_and_id", "run", "transactions", "TestTransactionList", "api_test", "()", "get", "get/test_rest_api_get_transaction.py"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.0004432201385498047, "outcome": "passed"}, "call": {"duration": 0.0005180835723876953, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_transaction.py", "lineno": 238, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_transaction", "msg": "Starting test for transactions with head and id parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_transaction.py", "filename": "test_rest_api_get_transaction.py", "module": "test_rest_api_get_transaction", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 216, "funcName": "test_api_get_transaction_list_head_and_id", "created": 1552467158.0141768, "msecs": 14.17684555053711, "relativeCreated": 162614.49599266052, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}], "longrepr": "self = <test_rest_api_get_transaction.TestTransactionList object at 0x7f3e3213d240>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_transaction_list_head_and_id(self, setup):\n        \"\"\"Tests GET /transactions is reachable with head and id as parameters\n        \"\"\"\n        LOGGER.info(\"Starting test for transactions with head and id parameter\")\n    \n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_txns = setup['expected_txns']\n        expected_length = setup['expected_trn_length']\n        payload = setup['payload'][0]\n        address = setup['address']\n        start = expected_txns[0]\n        transaction_ids   =  setup['transaction_ids']\n        expected_id = transaction_ids[0]\n        expected_length = len([expected_id])\n        limit = setup['limit']\n    \n        expected_link = '{}/transactions?head={}&start={}&limit={}&id={}'.format(address,\\\n                         expected_head, start, limit, expected_id)\n    \n        params={'head':expected_head,'id':expected_id}\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/transactions'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_transaction.py:238: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31ebe518>, url = 'http://192.168.1.23:8008/transactions', allow_redirects = True\nkwargs = {'params': {'head': 'f940acd87fa0e6851afd942a3855ad8883d2adfedc708c552fb26cdc9307a0c578d1dc27b3e2d4a3336dd4e8ea8704e61...f46a370182b8969033cc32858d5b9bbe382e34d37032a5fcf7d3d63fb31d8ef4f4b44b53f78cf975f46856af77'}, 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002503395080566406, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_paginated_transaction_list", "lineno": 249, "outcome": "passed", "keywords": ["first", "get/test_rest_api_get_transaction.py", "run", "test_api_get_paginated_transaction_list", "transactions", "api_test", "()", "get", "TestTransactionList"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.0004239082336425781, "outcome": "passed"}, "call": {"duration": 0.017490148544311523, "outcome": "passed", "log": [{"name": "test_rest_api_get_transaction", "msg": "Starting test for transactions with paging parameters", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_transaction.py", "filename": "test_rest_api_get_transaction.py", "module": "test_rest_api_get_transaction", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 253, "funcName": "test_api_get_paginated_transaction_list", "created": 1552467158.0324273, "msecs": 32.427310943603516, "relativeCreated": 162632.7464580536, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}]}, "teardown": {"duration": 0.00022339820861816406, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_limit", "lineno": 271, "outcome": "failed", "keywords": ["first", "get/test_rest_api_get_transaction.py", "run", "transactions", "test_api_get_transaction_list_limit", "api_test", "()", "get", "TestTransactionList"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.0004246234893798828, "outcome": "passed"}, "call": {"duration": 0.0005185604095458984, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_transaction.py", "lineno": 296, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_transaction", "msg": "Starting test for batch with paging parameters", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_transaction.py", "filename": "test_rest_api_get_transaction.py", "module": "test_rest_api_get_transaction", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 275, "funcName": "test_api_get_transaction_list_limit", "created": 1552467158.0513077, "msecs": 51.30767822265625, "relativeCreated": 162651.62682533264, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}], "longrepr": "self = <test_rest_api_get_transaction.TestTransactionList object at 0x7f3e31f67d68>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_transaction_list_limit(self, setup):\n        \"\"\"Tests GET /batches is reachable using paging parameters\n        \"\"\"\n        LOGGER.info(\"Starting test for batch with paging parameters\")\n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_txns = setup['expected_txns']\n        expected_length = setup['expected_trn_length']\n        payload = setup['payload'][0]\n        address = setup['address']\n        start = expected_txns[0]\n        transaction_ids   =  setup['transaction_ids']\n        expected_id = transaction_ids[0]\n        expected_length = len([expected_id])\n        limit = setup['limit']\n    \n        params={'limit':1}\n    \n        expected_link = '{}/transactions?head={}&start={}&limit={}'.format(address,\\\n                         expected_head, start, 1)\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/transactions'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_transaction.py:296: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d50d30>, url = 'http://192.168.1.23:8008/transactions', allow_redirects = True\nkwargs = {'params': {'limit': 1}, 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.000255584716796875, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_bad_paging", "lineno": 310, "outcome": "passed", "keywords": ["first", "test_api_get_transaction_bad_paging", "run", "transactions", "TestTransactionList", "api_test", "()", "get", "get/test_rest_api_get_transaction.py"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.0004620552062988281, "outcome": "passed"}, "call": {"duration": 0.014596700668334961, "outcome": "passed", "log": [{"name": "test_rest_api_get_transaction", "msg": "Starting test for transactions with bad paging parameters", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_transaction.py", "filename": "test_rest_api_get_transaction.py", "module": "test_rest_api_get_transaction", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 314, "funcName": "test_api_get_transaction_bad_paging", "created": 1552467158.06953, "msecs": 69.53001022338867, "relativeCreated": 162669.84915733337, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}]}, "teardown": {"duration": 0.0002346038818359375, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_invalid_start", "lineno": 326, "outcome": "passed", "keywords": ["first", "test_api_get_transaction_list_invalid_start", "run", "transactions", "TestTransactionList", "api_test", "()", "get", "get/test_rest_api_get_transaction.py"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.00043320655822753906, "outcome": "passed"}, "call": {"duration": 0.01712656021118164, "outcome": "passed", "log": [{"name": "test_rest_api_get_transaction", "msg": "Starting test for transactions with invalid start parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_transaction.py", "filename": "test_rest_api_get_transaction.py", "module": "test_rest_api_get_transaction", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 330, "funcName": "test_api_get_transaction_list_invalid_start", "created": 1552467158.085545, "msecs": 85.54506301879883, "relativeCreated": 162685.86421012878, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}]}, "teardown": {"duration": 0.00023245811462402344, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_invalid_limit", "lineno": 342, "outcome": "passed", "keywords": ["first", "test_api_get_transaction_list_invalid_limit", "run", "transactions", "TestTransactionList", "api_test", "()", "get", "get/test_rest_api_get_transaction.py"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.0004372596740722656, "outcome": "passed"}, "call": {"duration": 0.015183448791503906, "outcome": "passed", "log": [{"name": "test_rest_api_get_transaction", "msg": "Starting test for transactions with bad limit parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_transaction.py", "filename": "test_rest_api_get_transaction.py", "module": "test_rest_api_get_transaction", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 346, "funcName": "test_api_get_transaction_list_invalid_limit", "created": 1552467158.1041412, "msecs": 104.1412353515625, "relativeCreated": 162704.46038246155, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}]}, "teardown": {"duration": 0.00023484230041503906, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_list_reversed", "lineno": 359, "outcome": "failed", "keywords": ["first", "test_api_get_transaction_list_reversed", "run", "transactions", "TestTransactionList", "api_test", "()", "get", "get/test_rest_api_get_transaction.py"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.0004363059997558594, "outcome": "passed"}, "call": {"duration": 0.0005447864532470703, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_transaction.py", "lineno": 383, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_transaction", "msg": "Starting test for transactions with list reversed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_transaction.py", "filename": "test_rest_api_get_transaction.py", "module": "test_rest_api_get_transaction", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 363, "funcName": "test_api_get_transaction_list_reversed", "created": 1552467158.120798, "msecs": 120.79811096191406, "relativeCreated": 162721.1172580719, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}], "longrepr": "self = <test_rest_api_get_transaction.TestTransactionList object at 0x7f3e31e599e8>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_transaction_list_reversed(self, setup):\n        \"\"\"verifies that GET /transactions with list reversed\n        \"\"\"\n        LOGGER.info(\"Starting test for transactions with list reversed\")\n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_txns = setup['expected_txns']\n        expected_length = setup['expected_trn_length']\n        payload = setup['payload'][0]\n        address = setup['address']\n        start = expected_txns[::-1][0]\n        transaction_ids   =  setup['transaction_ids']\n        expected_id = transaction_ids[0]\n        expected_length = len([expected_id])\n        limit = setup['limit']\n        expected_link = '{}/transactions?head={}&start={}&limit={}'.format(address,\\\n                         expected_head, start, limit)\n    \n        params = 'reverse'\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/transactions'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_transaction.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e59da0>, url = 'http://192.168.1.23:8008/transactions', allow_redirects = True\nkwargs = {'params': 'reverse', 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002624988555908203, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transactions_link_val", "lineno": 391, "outcome": "failed", "keywords": ["test_api_get_transactions_link_val", "first", "run", "transactions", "TestTransactionList", "api_test", "()", "get", "get/test_rest_api_get_transaction.py"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.0004208087921142578, "outcome": "passed"}, "call": {"duration": 0.00045609474182128906, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_transaction.py", "lineno": 398, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_transaction.TestTransactionList object at 0x7f3e31e1b048>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_transactions_link_val(self, setup):\n        \"\"\"Tests/ validate the transactions parameters with transactions, head, start and limit\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n>               async with session.get(url='{}/transactions'.format(address), raise_for_status=True) as data:\n\nget/test_rest_api_get_transaction.py:398: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e1b1d0>, url = 'http://192.168.1.23:8008/transactions', allow_redirects = True\nkwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002493858337402344, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transactions_key_params", "lineno": 410, "outcome": "failed", "keywords": ["first", "get/test_rest_api_get_transaction.py", "run", "test_api_get_transactions_key_params", "transactions", "api_test", "()", "get", "TestTransactionList"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.00041961669921875, "outcome": "passed"}, "call": {"duration": 0.00045800209045410156, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_transaction.py", "lineno": 417, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_transaction.TestTransactionList object at 0x7f3e31d50c50>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_transactions_key_params(self, setup):\n        \"\"\"Tests/ validate the state key parameters with data, head, link and paging\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n>               async with session.get(url='{}/transactions'.format(address), raise_for_status=True) as data:\n\nget/test_rest_api_get_transaction.py:417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d50748>, url = 'http://192.168.1.23:8008/transactions', allow_redirects = True\nkwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00025200843811035156, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_api_get_transaction_id_length", "lineno": 426, "outcome": "failed", "keywords": ["first", "run", "transactions", "TestTransactionList", "api_test", "test_api_get_transaction_id_length", "()", "get", "get/test_rest_api_get_transaction.py"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.00042438507080078125, "outcome": "passed"}, "call": {"duration": 0.0004611015319824219, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_transaction.py", "lineno": 433, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_transaction.TestTransactionList object at 0x7f3e31ea48d0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_transaction_id_length(self, setup):\n        \"\"\"Tests the transaction id length should be 128 hex character long\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n>               async with session.get(url='{}/transactions'.format(address), raise_for_status=True) as data:\n\nget/test_rest_api_get_transaction.py:433: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31ea40b8>, url = 'http://192.168.1.23:8008/transactions', allow_redirects = True\nkwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002675056457519531, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionList::test_rest_api_check_transactions_count", "lineno": 442, "outcome": "failed", "keywords": ["first", "run", "transactions", "TestTransactionList", "api_test", "()", "test_rest_api_check_transactions_count", "get", "get/test_rest_api_get_transaction.py"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.0004177093505859375, "outcome": "passed"}, "call": {"duration": 0.0004572868347167969, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_transaction.py", "lineno": 450, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_transaction.TestTransactionList object at 0x7f3e31e42470>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_rest_api_check_transactions_count(self, setup):\n        \"\"\"Tests transaction count from transaction list\n        \"\"\"\n        address = setup['address']\n        count =0\n        try:\n            async with aiohttp.ClientSession() as session:\n>               async with session.get(url='{}/transactions'.format(address), raise_for_status=True) as data:\n\nget/test_rest_api_get_transaction.py:450: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e42e10>, url = 'http://192.168.1.23:8008/transactions', allow_redirects = True\nkwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002474784851074219, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionGet::test_api_get_transaction_id", "lineno": 458, "outcome": "failed", "keywords": ["first", "TestTransactionGet", "run", "transactions", "api_test", "()", "get", "test_api_get_transaction_id", "get/test_rest_api_get_transaction.py"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.0004107952117919922, "outcome": "passed"}, "call": {"duration": 0.0005335807800292969, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_transaction.py", "lineno": 476, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_transaction", "msg": "Starting test for transaction/{transaction_id}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_transaction.py", "filename": "test_rest_api_get_transaction.py", "module": "test_rest_api_get_transaction", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 462, "funcName": "test_api_get_transaction_id", "created": 1552467158.2078128, "msecs": 207.81278610229492, "relativeCreated": 162808.13193321228, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}], "longrepr": "self = <test_rest_api_get_transaction.TestTransactionGet object at 0x7f3e31e592e8>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_transaction_id(self, setup):\n        \"\"\"Tests that GET /transactions/{transaction_id} is reachable\n        \"\"\"\n        LOGGER.info(\"Starting test for transaction/{transaction_id}\")\n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_txns = setup['expected_txns']\n        expected_id = expected_txns[0]\n        address = setup['address']\n        payload = setup['payload']\n        expected_length = 1\n    \n        expected_link = '{}/transactions/{}'.format(address,expected_id)\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/transactions/{}'.format(address,expected_id),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_transaction.py:476: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e1b5c0>\nurl = 'http://192.168.1.23:8008/transactions/48b9377946f0f8cade989d3bf15538d0d9c959f46a370182b8969033cc32858d5b9bbe382e34d37032a5fcf7d3d63fb31d8ef4f4b44b53f78cf975f46856af77'\nallow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002484321594238281, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_transaction.py::TestTransactionGet::test_api_get_transaction_bad_id", "lineno": 486, "outcome": "passed", "keywords": ["first", "run", "transactions", "api_test", "()", "get", "test_api_get_transaction_bad_id", "TestTransactionGet", "get/test_rest_api_get_transaction.py"], "metadata": {"0": "Tests the transaction list after submitting intkey batches\n        ", "1": "Tests that GET /transactions is reachable with head parameter \n        ", "2": "Tests that GET /transactions is unreachable with bad head parameter \n        ", "3": "Tests that GET /transactions is reachable with id as parameter \n        ", "4": "Tests that GET /transactions is unreachable with bad id parameter \n        ", "5": "Tests GET /transactions is reachable with head and id as parameters \n        ", "6": "Tests GET /transactions is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable using paging parameters \n        ", "8": "Tests GET /transactions is reachbale using bad paging parameters \n        ", "9": "Tests that GET /transactions is unreachable with invalid start parameter \n        ", "10": "Tests that GET /transactions is unreachable with bad limit parameter \n        ", "11": "verifies that GET /transactions with list reversed\n        ", "12": "Tests/ validate the transactions parameters with transactions, head, start and limit\n        ", "13": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "14": "Tests the transaction id length should be 128 hex character long \n        ", "15": "Tests transaction count from transaction list \n        ", "16": "Tests that GET /transactions/{transaction_id} is reachable \n        ", "17": "Tests that GET /transactions/{transaction_id} is not reachable\nwith bad id"}, "setup": {"duration": 0.00041937828063964844, "outcome": "passed"}, "call": {"duration": 0.014864921569824219, "outcome": "passed", "log": [{"name": "test_rest_api_get_transaction", "msg": "Starting test for transactions/{bad_id}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_transaction.py", "filename": "test_rest_api_get_transaction.py", "module": "test_rest_api_get_transaction", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 491, "funcName": "test_api_get_transaction_bad_id", "created": 1552467158.225579, "msecs": 225.57902336120605, "relativeCreated": 162825.8981704712, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}]}, "teardown": {"duration": 0.00023245811462402344, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list", "lineno": 92, "outcome": "passed", "keywords": ["batch", "second", "run", "TestBatchList", "api_test", "()", "test_api_get_batch_list", "get", "get/test_rest_api_get_batch.py"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.00046515464782714844, "outcome": "passed"}, "call": {"duration": 0.020093679428100586, "outcome": "passed", "log": [{"name": "test_rest_api_get_batch", "msg": "Starting tests for batch list", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_batch.py", "filename": "test_rest_api_get_batch.py", "module": "test_rest_api_get_batch", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 96, "funcName": "test_api_get_batch_list", "created": 1552467158.2418733, "msecs": 241.87326431274414, "relativeCreated": 162842.19241142273, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}, {"name": "base", "msg": "7", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/base.py", "filename": "base.py", "module": "base", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 205, "funcName": "assert_valid_data_length", "created": 1552467158.2488854, "msecs": 248.8853931427002, "relativeCreated": 162849.2045402527, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}, {"name": "base", "msg": "7", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/base.py", "filename": "base.py", "module": "base", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 206, "funcName": "assert_valid_data_length", "created": 1552467158.2489777, "msecs": 248.9776611328125, "relativeCreated": 162849.2968082428, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}]}, "teardown": {"duration": 0.00024271011352539062, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_head", "lineno": 134, "outcome": "failed", "keywords": ["second", "run", "TestBatchList", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get", "test_api_get_batch_list_head"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0004417896270751953, "outcome": "passed"}, "call": {"duration": 0.000537872314453125, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_batch.py", "lineno": 157, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_batch", "msg": "Starting test for batch with head parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_batch.py", "filename": "test_rest_api_get_batch.py", "module": "test_rest_api_get_batch", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 138, "funcName": "test_api_get_batch_list_head", "created": 1552467158.2634778, "msecs": 263.4778022766113, "relativeCreated": 162863.7969493866, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}], "longrepr": "self = <test_rest_api_get_batch.TestBatchList object at 0x7f3e31e90eb8>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_batch_list_head(self, setup):\n        \"\"\"Tests that GET /batches is reachable with head parameter\n        \"\"\"\n        LOGGER.info(\"Starting test for batch with head parameter\")\n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_batches = setup['expected_batches']\n        expected_txns = setup['expected_txns']\n        payload = setup['payload']\n        expected_head = setup['expected_head']\n        start = setup['start']\n        limit = setup['limit']\n        address = setup['address']\n    \n        expected_link = '{}/batches?head={}&start={}&limit={}'.format(address,\\\n                         expected_head, start, limit)\n    \n        params={'head': expected_head}\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/batches'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_batch.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e90ba8>, url = 'http://192.168.1.23:8008/batches', allow_redirects = True\nkwargs = {'params': {'head': 'f940acd87fa0e6851afd942a3855ad8883d2adfedc708c552fb26cdc9307a0c578d1dc27b3e2d4a3336dd4e8ea8704e61948ac47db4236c39ecc8f30f385047b'}, 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024271011352539062, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_bad_head", "lineno": 171, "outcome": "passed", "keywords": ["test_api_get_batch_list_bad_head", "second", "run", "TestBatchList", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0004253387451171875, "outcome": "passed"}, "call": {"duration": 0.014705896377563477, "outcome": "passed", "log": [{"name": "test_rest_api_get_batch", "msg": "Starting test for batch with bad head parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_batch.py", "filename": "test_rest_api_get_batch.py", "module": "test_rest_api_get_batch", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 175, "funcName": "test_api_get_batch_list_bad_head", "created": 1552467158.2844577, "msecs": 284.4576835632324, "relativeCreated": 162884.77683067322, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}]}, "teardown": {"duration": 0.00022149085998535156, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_id", "lineno": 187, "outcome": "failed", "keywords": ["test_api_get_batch_list_id", "second", "run", "TestBatchList", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.00043320655822753906, "outcome": "passed"}, "call": {"duration": 0.0005242824554443359, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_batch.py", "lineno": 213, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_batch", "msg": "Starting test for batch with id parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_batch.py", "filename": "test_rest_api_get_batch.py", "module": "test_rest_api_get_batch", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 191, "funcName": "test_api_get_batch_list_id", "created": 1552467158.3005667, "msecs": 300.5666732788086, "relativeCreated": 162900.8858203888, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}], "longrepr": "self = <test_rest_api_get_batch.TestBatchList object at 0x7f3e31e83be0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_batch_list_id(self, setup):\n        \"\"\"Tests that GET /batches is reachable with id as parameter\n        \"\"\"\n        LOGGER.info(\"Starting test for batch with id parameter\")\n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_batches = setup['expected_batches']\n        expected_txns = setup['expected_txns']\n        payload = setup['payload']\n        batch_ids   =  setup['batch_ids']\n        start = setup['start']\n        limit = setup['limit']\n        address = setup['address']\n    \n        expected_id = batch_ids[0]\n        expected_length = len([expected_id])\n    \n        expected_link = '{}/batches?head={}&start={}&limit={}&id={}'.format(address,\\\n                         expected_head, start, limit, expected_id)\n    \n        params={'id': expected_id}\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/batches'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_batch.py:213: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e830f0>, url = 'http://192.168.1.23:8008/batches', allow_redirects = True\nkwargs = {'params': {'id': 'b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b98662d3e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905'}, 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00025177001953125, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_bad_id", "lineno": 227, "outcome": "passed", "keywords": ["test_api_get_batch_list_bad_id", "second", "run", "TestBatchList", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.00043392181396484375, "outcome": "passed"}, "call": {"duration": 0.014688968658447266, "outcome": "passed", "log": [{"name": "test_rest_api_get_batch", "msg": "Starting test for batch with bad id parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_batch.py", "filename": "test_rest_api_get_batch.py", "module": "test_rest_api_get_batch", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 231, "funcName": "test_api_get_batch_list_bad_id", "created": 1552467158.3213136, "msecs": 321.31361961364746, "relativeCreated": 162921.63276672363, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}]}, "teardown": {"duration": 0.0002295970916748047, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_head_and_id", "lineno": 243, "outcome": "failed", "keywords": ["second", "run", "TestBatchList", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get", "test_api_get_batch_list_head_and_id"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0004341602325439453, "outcome": "passed"}, "call": {"duration": 0.0005273818969726562, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_batch.py", "lineno": 269, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_batch", "msg": "Starting test for batch with head and id parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_batch.py", "filename": "test_rest_api_get_batch.py", "module": "test_rest_api_get_batch", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 247, "funcName": "test_api_get_batch_list_head_and_id", "created": 1552467158.337409, "msecs": 337.40901947021484, "relativeCreated": 162937.7281665802, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}], "longrepr": "self = <test_rest_api_get_batch.TestBatchList object at 0x7f3e31d467b8>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_batch_list_head_and_id(self, setup):\n        \"\"\"Tests GET /batches is reachable with head and id as parameters\n        \"\"\"\n        LOGGER.info(\"Starting test for batch with head and id parameter\")\n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_batches = setup['expected_batches']\n        expected_txns = setup['expected_txns']\n        payload = setup['payload']\n        batch_ids   =  setup['batch_ids']\n        start = setup['start']\n        limit = setup['limit']\n        address = setup['address']\n    \n        expected_id = batch_ids[0]\n        expected_length = len([expected_id])\n    \n        expected_link = '{}/batches?head={}&start={}&limit={}&id={}'.format(address,\\\n                         expected_head, start, limit, expected_id)\n    \n        params={'head':expected_head,'id':expected_id}\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/batches'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_batch.py:269: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d46b00>, url = 'http://192.168.1.23:8008/batches', allow_redirects = True\nkwargs = {'params': {'head': 'f940acd87fa0e6851afd942a3855ad8883d2adfedc708c552fb26cdc9307a0c578d1dc27b3e2d4a3336dd4e8ea8704e61...98d03f9dc0be5906a4e94c9b98662d3e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905'}, 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024962425231933594, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_paginated_batch_list", "lineno": 283, "outcome": "passed", "keywords": ["second", "run", "TestBatchList", "api_test", "test_api_get_paginated_batch_list", "()", "batch", "get", "get/test_rest_api_get_batch.py"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0004565715789794922, "outcome": "passed"}, "call": {"duration": 0.017591476440429688, "outcome": "passed", "log": [{"name": "test_rest_api_get_batch", "msg": "Starting test for batch with paging parameters", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_batch.py", "filename": "test_rest_api_get_batch.py", "module": "test_rest_api_get_batch", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 287, "funcName": "test_api_get_paginated_batch_list", "created": 1552467158.3580625, "msecs": 358.0625057220459, "relativeCreated": 162958.38165283203, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}]}, "teardown": {"duration": 0.00022935867309570312, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_limit", "lineno": 303, "outcome": "failed", "keywords": ["test_api_get_batch_list_limit", "second", "run", "TestBatchList", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0004429817199707031, "outcome": "passed"}, "call": {"duration": 0.0005164146423339844, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_batch.py", "lineno": 326, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_batch", "msg": "Starting test for batch with paging parameters", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_batch.py", "filename": "test_rest_api_get_batch.py", "module": "test_rest_api_get_batch", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 307, "funcName": "test_api_get_batch_list_limit", "created": 1552467158.377114, "msecs": 377.11405754089355, "relativeCreated": 162977.43320465088, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}], "longrepr": "self = <test_rest_api_get_batch.TestBatchList object at 0x7f3e31e1bb70>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_batch_list_limit(self, setup):\n        \"\"\"Tests GET /batches is reachable with limit\n        \"\"\"\n        LOGGER.info(\"Starting test for batch with paging parameters\")\n        signer_key = setup['signer_key']\n        batch_ids   =  setup['batch_ids']\n        expected_head = setup['expected_head']\n        expected_head = setup['expected_head']\n        expected_batches = setup['expected_batches']\n        expected_txns = setup['expected_txns']\n        payload = setup['payload']\n        expected_id = batch_ids[0]\n        start = setup['start']\n        address = setup['address']\n        params={'limit':1}\n    \n        expected_link = '{}/batches?head={}&start={}&limit={}'.format(address,\\\n                         expected_head, start, 1)\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/batches'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_batch.py:326: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e7f7f0>, url = 'http://192.168.1.23:8008/batches', allow_redirects = True\nkwargs = {'params': {'limit': 1}, 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024962425231933594, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_invalid_start", "lineno": 341, "outcome": "passed", "keywords": ["second", "run", "TestBatchList", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get", "test_api_get_batch_list_invalid_start"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.00044465065002441406, "outcome": "passed"}, "call": {"duration": 0.017418384552001953, "outcome": "passed", "log": [{"name": "test_rest_api_get_batch", "msg": "Starting test for batch with invalid start parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_batch.py", "filename": "test_rest_api_get_batch.py", "module": "test_rest_api_get_batch", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 345, "funcName": "test_api_get_batch_list_invalid_start", "created": 1552467158.3975248, "msecs": 397.5248336791992, "relativeCreated": 162997.84398078918, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}]}, "teardown": {"duration": 0.0002357959747314453, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_invalid_limit", "lineno": 361, "outcome": "passed", "keywords": ["second", "run", "TestBatchList", "test_api_get_batch_list_invalid_limit", "api_test", "()", "batch", "get", "get/test_rest_api_get_batch.py"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0004429817199707031, "outcome": "passed"}, "call": {"duration": 0.014820575714111328, "outcome": "passed", "log": [{"name": "test_rest_api_get_batch", "msg": "Starting test for batch with bad limit parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_batch.py", "filename": "test_rest_api_get_batch.py", "module": "test_rest_api_get_batch", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 365, "funcName": "test_api_get_batch_list_invalid_limit", "created": 1552467158.416372, "msecs": 416.37206077575684, "relativeCreated": 163016.69120788574, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}]}, "teardown": {"duration": 0.0002334117889404297, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_list_reversed", "lineno": 380, "outcome": "failed", "keywords": ["second", "run", "TestBatchList", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get", "test_api_get_batch_list_reversed"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0004630088806152344, "outcome": "passed"}, "call": {"duration": 0.0005693435668945312, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_batch.py", "lineno": 405, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_batch", "msg": "Starting test for batch list as reversed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_batch.py", "filename": "test_rest_api_get_batch.py", "module": "test_rest_api_get_batch", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 384, "funcName": "test_api_get_batch_list_reversed", "created": 1552467158.4327223, "msecs": 432.7223300933838, "relativeCreated": 163033.04147720337, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}], "longrepr": "self = <test_rest_api_get_batch.TestBatchList object at 0x7f3e31e425f8>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_batch_list_reversed(self, setup):\n        \"\"\"verifies that GET /batches is unreachable with bad head parameter\n        \"\"\"\n        LOGGER.info(\"Starting test for batch list as reversed\")\n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_batches = setup['expected_batches']\n        expected_txns = setup['expected_txns']\n        expected_length = setup['expected_batch_length']\n        payload = setup['payload']\n        start = setup['batch_ids'][::-1][0]\n        print(setup['batch_ids'])\n        print(start)\n        limit = setup['limit']\n        address = setup['address']\n    \n        expected_link = '{}/batches?head={}&start={}&limit={}&reverse'.format(address,\\\n                         expected_head, start, limit)\n    \n        params = 'reverse'\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/batches'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_batch.py:405: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31cef6d8>, url = 'http://192.168.1.23:8008/batches', allow_redirects = True\nkwargs = {'params': 'reverse', 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002505779266357422, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_key_params", "lineno": 422, "outcome": "failed", "keywords": ["second", "run", "TestBatchList", "test_api_get_batch_key_params", "api_test", "()", "batch", "get", "get/test_rest_api_get_batch.py"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.00044846534729003906, "outcome": "passed"}, "call": {"duration": 0.000476837158203125, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_batch.py", "lineno": 429, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_batch.TestBatchList object at 0x7f3e31eca6d8>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_batch_key_params(self, setup):\n        \"\"\"Tests/ validate the block key parameters with data, head, link and paging\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n>               async with session.get(url='{}/batches'.format(address), raise_for_status=True) as data:\n\nget/test_rest_api_get_batch.py:429: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31eca240>, url = 'http://192.168.1.23:8008/batches', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024962425231933594, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_api_get_batch_param_link_val", "lineno": 438, "outcome": "failed", "keywords": ["second", "run", "()", "TestBatchList", "api_test", "test_api_get_batch_param_link_val", "batch", "get", "get/test_rest_api_get_batch.py"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.00045180320739746094, "outcome": "passed"}, "call": {"duration": 0.0004642009735107422, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_batch.py", "lineno": 445, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_batch.TestBatchList object at 0x7f3e31cf66d8>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_batch_param_link_val(self, setup):\n        \"\"\"Tests/ validate the batch parameters with batches, head, start and limit\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n>               async with session.get(url='{}/batches'.format(address), raise_for_status=True) as data:\n\nget/test_rest_api_get_batch.py:445: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31cf6c88>, url = 'http://192.168.1.23:8008/batches', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002505779266357422, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchList::test_rest_api_check_batches_count", "lineno": 458, "outcome": "failed", "keywords": ["second", "run", "TestBatchList", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get", "test_rest_api_check_batches_count"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.00044727325439453125, "outcome": "passed"}, "call": {"duration": 0.0004563331604003906, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_batch.py", "lineno": 466, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_batch.TestBatchList object at 0x7f3e31d54668>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_rest_api_check_batches_count(self, setup):\n        \"\"\"Tests batches count from batch list\n        \"\"\"\n        address = setup['address']\n        count =0\n        try:\n            async with aiohttp.ClientSession() as session:\n>               async with session.get(url='{}/batches'.format(address), raise_for_status=True) as data:\n\nget/test_rest_api_get_batch.py:466: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d54a90>, url = 'http://192.168.1.23:8008/batches', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002644062042236328, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchGet::test_api_get_batch_id", "lineno": 474, "outcome": "failed", "keywords": ["second", "run", "TestBatchGet", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get", "test_api_get_batch_id"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.00044989585876464844, "outcome": "passed"}, "call": {"duration": 0.0004589557647705078, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_batch.py", "lineno": 494, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_batch.TestBatchGet object at 0x7f3e31e902e8>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_batch_id(self, setup):\n        \"\"\"verifies that GET /batches/{batch_id}\n           is reachable with head parameter\n        \"\"\"\n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_batches = setup['expected_batches']\n        expected_txns = setup['expected_txns']\n        expected_length = setup['expected_batch_length']\n        batch_ids = setup['batch_ids']\n        expected_id = batch_ids[0]\n        payload = setup['payload']\n        address = setup['address']\n    \n        expected_link = '{}/batches/{}'.format(address, expected_batches[0])\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/batches/{}'.format(address,expected_id),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_batch.py:494: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31cc4630>\nurl = 'http://192.168.1.23:8008/batches/b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b98662d3e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905'\nallow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024962425231933594, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchGet::test_api_get_bad_batch_id", "lineno": 505, "outcome": "passed", "keywords": ["test_api_get_bad_batch_id", "second", "run", "TestBatchGet", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0004482269287109375, "outcome": "passed"}, "call": {"duration": 0.01503133773803711, "outcome": "passed"}, "teardown": {"duration": 0.00022935867309570312, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_post_batch_status_15ids", "lineno": 522, "outcome": "passed", "keywords": ["TestBatchStatusesList", "second", "run", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get", "test_api_post_batch_status_15ids"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0004324913024902344, "outcome": "passed"}, "call": {"duration": 0.016939878463745117, "outcome": "passed", "log": [{"name": "test_rest_api_get_batch", "msg": "Starting test for batch with bad head parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_batch.py", "filename": "test_rest_api_get_batch.py", "module": "test_rest_api_get_batch", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 526, "funcName": "test_api_post_batch_status_15ids", "created": 1552467158.5492783, "msecs": 549.2782592773438, "relativeCreated": 163149.59740638733, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}]}, "teardown": {"duration": 0.00023698806762695312, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_post_batch_status_10ids", "lineno": 540, "outcome": "passed", "keywords": ["TestBatchStatusesList", "second", "run", "api_test", "test_api_post_batch_status_10ids", "get/test_rest_api_get_batch.py", "()", "batch", "get"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0004475116729736328, "outcome": "passed"}, "call": {"duration": 0.01700139045715332, "outcome": "passed", "log": [{"name": "test_rest_api_get_batch", "msg": "Starting test for post batch statuses with less than 15 ids", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_batch.py", "filename": "test_rest_api_get_batch.py", "module": "test_rest_api_get_batch", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 544, "funcName": "test_api_post_batch_status_10ids", "created": 1552467158.5677254, "msecs": 567.725419998169, "relativeCreated": 163168.04456710815, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}]}, "teardown": {"duration": 0.0002396106719970703, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses", "lineno": 558, "outcome": "passed", "keywords": ["test_api_get_batch_statuses", "TestBatchStatusesList", "second", "run", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0004813671112060547, "outcome": "passed"}, "call": {"duration": 0.016870737075805664, "outcome": "passed"}, "teardown": {"duration": 0.00023245811462402344, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses_many_ids", "lineno": 580, "outcome": "passed", "keywords": ["test_api_get_batch_statuses_many_ids", "TestBatchStatusesList", "second", "run", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0004570484161376953, "outcome": "passed"}, "call": {"duration": 0.0168149471282959, "outcome": "passed"}, "teardown": {"duration": 0.00023317337036132812, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses_bad_id", "lineno": 604, "outcome": "passed", "keywords": ["TestBatchStatusesList", "second", "run", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get", "test_api_get_batch_statuses_bad_id"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.00045037269592285156, "outcome": "passed"}, "call": {"duration": 0.014409065246582031, "outcome": "passed"}, "teardown": {"duration": 0.0002334117889404297, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses_invalid_query", "lineno": 623, "outcome": "passed", "keywords": ["TestBatchStatusesList", "test_api_get_batch_statuses_invalid_query", "second", "run", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.00045371055603027344, "outcome": "passed"}, "call": {"duration": 0.014853239059448242, "outcome": "passed"}, "teardown": {"duration": 0.0002465248107910156, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses_wait", "lineno": 640, "outcome": "passed", "keywords": ["TestBatchStatusesList", "second", "run", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get", "test_api_get_batch_statuses_wait"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0004801750183105469, "outcome": "passed"}, "call": {"duration": 0.01689457893371582, "outcome": "passed"}, "teardown": {"duration": 0.00023794174194335938, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses_invalid", "lineno": 666, "outcome": "failed", "keywords": ["TestBatchStatusesList", "second", "run", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get", "test_api_get_batch_statuses_invalid"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 300.0277855396271, "outcome": "passed", "log": [{"name": "fixtures", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/fixtures.py", "filename": "fixtures.py", "module": "fixtures", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 92, "funcName": "invalid_batch", "created": 1552467158.6759207, "msecs": 675.9207248687744, "relativeCreated": 163276.23987197876, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}, {"name": "fixtures", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/fixtures.py", "filename": "fixtures.py", "module": "fixtures", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 107, "funcName": "invalid_batch", "created": 1552467158.6851604, "msecs": 685.1603984832764, "relativeCreated": 163285.47954559326, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:22:38"}]}, "call": {"duration": 0.004651784896850586, "outcome": "failed", "crash": {"path": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/base.py", "lineno": 41, "message": "AssertionError"}, "traceback": [{"path": "get/test_rest_api_get_batch.py", "lineno": 684, "message": ""}, {"path": "base.py", "lineno": 41, "message": "AssertionError"}], "longrepr": "self = <test_rest_api_get_batch.TestBatchStatusesList object at 0x7f3e31dc0c18>\ninvalid_batch = {'address': 'http://192.168.1.23:8008', 'expected_batches': ['cb486cee59a7e029378f240d021ee1d93cc772329e163b90d9189c61...9ef58ffb39e9f2344153c6524a95eafe2f44cab02ce0210efe2116cab3f750b02a186c346025b9833a88c8450751ef04958edcef3822c34c2f72']}\n\n    async def test_api_get_batch_statuses_invalid(self, invalid_batch):\n        \"\"\"verifies that GET /batches_status is unreachable with invalid\n        \"\"\"\n        expected_batches = invalid_batch['expected_batches']\n        address = invalid_batch['address']\n        status = \"INVALID\"\n        expected_link = '{}/batch_statuses?id={}'.format(address, expected_batches[0])\n        params = {'id': expected_batches[0]}\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/batch_statuses'.format(address),\n                                        params=params) as data:\n                    response = await data.json()\n        except aiohttp.client_exceptions.ClientResponseError as error:\n            LOGGER.info(error)\n    \n>       self.assert_status(response,status)\n\nget/test_rest_api_get_batch.py:684: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_rest_api_get_batch.TestBatchStatusesList object at 0x7f3e31dc0c18>\nresponse = {'data': [{'id': 'cb486cee59a7e029378f240d021ee1d93cc772329e163b90d9189c61f23c12f0205d760ae70b346f50f15a9a96d2d4d84a2c...7e029378f240d021ee1d93cc772329e163b90d9189c61f23c12f0205d760ae70b346f50f15a9a96d2d4d84a2ce79cb2de54099bfc014d837b69ba'}\nstatus = 'INVALID'\n\n    def assert_status(self, response, status):\n        for data in response['data']:\n>           assert data['status'] == status\nE           AssertionError\n\nbase.py:41: AssertionError"}, "teardown": {"duration": 0.000308990478515625, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses_unknown", "lineno": 687, "outcome": "passed", "keywords": ["TestBatchStatusesList", "second", "run", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get", "test_api_get_batch_statuses_unknown"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0005438327789306641, "outcome": "passed"}, "call": {"duration": 0.018845081329345703, "outcome": "passed"}, "teardown": {"duration": 0.00022482872009277344, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_batch.py::TestBatchStatusesList::test_api_get_batch_statuses_default_wait", "lineno": 710, "outcome": "passed", "keywords": ["TestBatchStatusesList", "test_api_get_batch_statuses_default_wait", "second", "run", "api_test", "get/test_rest_api_get_batch.py", "()", "batch", "get"], "metadata": {"0": "Tests the batch list by submitting intkey batches\n        ", "1": "Tests that GET /batches is reachable with head parameter \n        ", "2": "Tests that GET /batches is unreachable with bad head parameter \n        ", "3": "Tests that GET /batches is reachable with id as parameter \n        ", "4": "Tests that GET /batches is unreachable with bad id parameter \n        ", "5": "Tests GET /batches is reachable with head and id as parameters \n        ", "6": "Tests GET /batches is reachable using paging parameters \n        ", "7": "Tests GET /batches is reachable with limit \n        ", "8": "Tests that GET /batches is unreachable with invalid start parameter \n        ", "9": "Tests that GET /batches is unreachable with bad limit parameter \n        ", "10": "verifies that GET /batches is unreachable with bad head parameter \n        ", "11": "Tests/ validate the block key parameters with data, head, link and paging               \n        ", "12": "Tests/ validate the batch parameters with batches, head, start and limit\n        ", "13": "Tests batches count from batch list \n        ", "14": "verifies that GET /batches/{batch_id} \nis reachable with head parameter ", "15": "verifies that GET /batches/{bad_batch_id} \nis unreachable with bad head parameter ", "16": "verifies that POST /batches_statuses with more than 15 ids\n        ", "17": "verifies that POST /batches_status with less than 10 ids\n        ", "18": "verifies that GET /batches_status\n        ", "19": "verifies that GET /batches_status with many ids\n        ", "20": "verifies that GET /batches_status with bad ids\n        ", "21": "verifies that GET /batches_status with invalid query\n        ", "22": "verifies that GET /batches_status with waiting time\n        ", "23": "verifies that GET /batches_status is unreachable with invalid\n        ", "24": "verifies that GET /batches_status with unknown \n        ", "25": "verifies that GET /batches_status is unreachable with default wait time\n        "}, "setup": {"duration": 0.0004448890686035156, "outcome": "passed"}, "call": {"duration": 0.016234397888183594, "outcome": "passed"}, "teardown": {"duration": 0.0002377033233642578, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list", "lineno": 86, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "test_api_get_state_list", "third", "run", "api_test", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0004885196685791016, "outcome": "passed"}, "call": {"duration": 0.0004343986511230469, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 98, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31d4feb8>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_list(self, setup):\n        \"\"\"Tests the state list by submitting intkey batches\n        \"\"\"\n        address = setup['address']\n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_address = setup['state_address'][0]\n        expected_link =  \"{}/state?head={}&start={}&limit=100\".format(address, expected_head,\\\n                                                                      expected_address)\n        try:\n            async with aiohttp.ClientSession() as session:\n>               async with session.get(url='{}/state'.format(address), raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d46518>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002505779266357422, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_head", "lineno": 107, "outcome": "passed", "keywords": ["get/test_rest_api_get_state.py", "test_api_get_state_list_head", "third", "run", "api_test", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.00045752525329589844, "outcome": "passed"}, "call": {"duration": 0.019834280014038086, "outcome": "passed", "log": [{"name": "test_rest_api_get_state", "msg": "Starting test for state with head parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "filename": "test_rest_api_get_state.py", "module": "test_rest_api_get_state", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 111, "funcName": "test_api_get_state_list_head", "created": 1552467458.7825212, "msecs": 782.5212478637695, "relativeCreated": 463382.84039497375, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:27:38"}]}, "teardown": {"duration": 0.0002205371856689453, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_invalid_batch", "lineno": 130, "outcome": "passed", "keywords": ["get/test_rest_api_get_state.py", "third", "run", "api_test", "state", "()", "get", "TestStateList", "test_api_get_state_list_invalid_batch"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 300.03012919425964, "outcome": "passed", "log": [{"name": "fixtures", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/fixtures.py", "filename": "fixtures.py", "module": "fixtures", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 92, "funcName": "invalid_batch", "created": 1552467458.8058612, "msecs": 805.861234664917, "relativeCreated": 463406.1803817749, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:27:38"}, {"name": "fixtures", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/fixtures.py", "filename": "fixtures.py", "module": "fixtures", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 107, "funcName": "invalid_batch", "created": 1552467458.8147972, "msecs": 814.7971630096436, "relativeCreated": 463415.1163101196, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:27:38"}]}, "call": {"duration": 0.026745319366455078, "outcome": "passed"}, "teardown": {"duration": 0.0003108978271484375, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_bad_head", "lineno": 143, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "test_api_get_state_list_bad_head", "third", "run", "api_test", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0005903244018554688, "outcome": "passed"}, "call": {"duration": 0.006739139556884766, "outcome": "failed", "crash": {"path": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "lineno": 160, "message": "UnboundLocalError: local variable 'response' referenced before assignment"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 160, "message": "UnboundLocalError"}], "log": [{"name": "test_rest_api_get_state", "msg": "Starting test for state with bad head parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "filename": "test_rest_api_get_state.py", "module": "test_rest_api_get_state", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 148, "funcName": "test_api_get_state_list_bad_head", "created": 1552467758.8640678, "msecs": 864.067792892456, "relativeCreated": 763464.3869400024, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:38"}, {"name": "test_rest_api_get_state", "msg": "0, message='Attempt to decode JSON with unexpected mimetype: text/html; charset=utf-8'", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "filename": "test_rest_api_get_state.py", "module": "test_rest_api_get_state", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 158, "funcName": "test_api_get_state_list_bad_head", "created": 1552467758.8700776, "msecs": 870.0776100158691, "relativeCreated": 763470.3967571259, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:38"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31d85390>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_list_bad_head(self, setup):\n        \"\"\"Tests that GET /state is unreachable with bad head parameter\n        \"\"\"\n        address = setup['address']\n        LOGGER.info(\"Starting test for state with bad head parameter\")\n        bad_head = 'f'\n    \n        params={'head': BAD_HEAD}\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address), params=params) as data:\n                    response = await data.json()\n        except aiohttp.client_exceptions.ClientResponseError as error:\n            LOGGER.info(error)\n    \n>       self.assert_valid_error(response, INVALID_RESOURCE_ID)\nE       UnboundLocalError: local variable 'response' referenced before assignment\n\nget/test_rest_api_get_state.py:160: UnboundLocalError"}, "teardown": {"duration": 0.00031685829162597656, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_address", "lineno": 162, "outcome": "passed", "keywords": ["test_api_get_state_list_address", "get/test_rest_api_get_state.py", "third", "run", "api_test", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0006003379821777344, "outcome": "passed"}, "call": {"duration": 0.02214813232421875, "outcome": "passed", "log": [{"name": "test_rest_api_get_state", "msg": "Starting test for state with address parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "filename": "test_rest_api_get_state.py", "module": "test_rest_api_get_state", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 167, "funcName": "test_api_get_state_list_address", "created": 1552467758.885474, "msecs": 885.4739665985107, "relativeCreated": 763485.7931137085, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:38"}]}, "teardown": {"duration": 0.00028133392333984375, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_bad_address", "lineno": 180, "outcome": "failed", "keywords": ["test_api_get_state_list_bad_address", "get/test_rest_api_get_state.py", "third", "run", "api_test", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0005655288696289062, "outcome": "passed"}, "call": {"duration": 0.007361173629760742, "outcome": "failed", "crash": {"path": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "lineno": 195, "message": "UnboundLocalError: local variable 'response' referenced before assignment"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 195, "message": "UnboundLocalError"}], "log": [{"name": "test_rest_api_get_state", "msg": "Starting test for state with bad address parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "filename": "test_rest_api_get_state.py", "module": "test_rest_api_get_state", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 185, "funcName": "test_api_get_state_list_bad_address", "created": 1552467758.9093077, "msecs": 909.3077182769775, "relativeCreated": 763509.626865387, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:38"}, {"name": "test_rest_api_get_state", "msg": "0, message='Attempt to decode JSON with unexpected mimetype: text/html; charset=utf-8'", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "filename": "test_rest_api_get_state.py", "module": "test_rest_api_get_state", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 193, "funcName": "test_api_get_state_list_bad_address", "created": 1552467758.9160616, "msecs": 916.0616397857666, "relativeCreated": 763516.3807868958, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:38"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31e42748>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_list_bad_address(self, setup):\n        \"\"\"Tests that GET /state is unreachable with bad address parameter\n        \"\"\"\n        address = setup['address']\n        LOGGER.info(\"Starting test for state with bad address parameter\")\n        params = {'address': BAD_ADDRESS}\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address), params=params) as data:\n                    response = await data.json()\n        except aiohttp.client_exceptions.ClientResponseError as error:\n            LOGGER.info(error)\n    \n>       self.assert_valid_error(response , INVALID_STATE_ADDRESS)\nE       UnboundLocalError: local variable 'response' referenced before assignment\n\nget/test_rest_api_get_state.py:195: UnboundLocalError"}, "teardown": {"duration": 0.000247955322265625, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_paginated_state_list", "lineno": 196, "outcome": "passed", "keywords": ["get/test_rest_api_get_state.py", "get", "third", "run", "api_test", "state", "()", "test_api_get_paginated_state_list", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.000438690185546875, "outcome": "passed"}, "call": {"duration": 0.020232439041137695, "outcome": "passed", "log": [{"name": "test_rest_api_get_state", "msg": "Starting test for state with paging parameters", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "filename": "test_rest_api_get_state.py", "module": "test_rest_api_get_state", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 201, "funcName": "test_api_get_paginated_state_list", "created": 1552467758.9277027, "msecs": 927.7026653289795, "relativeCreated": 763528.021812439, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:38"}]}, "teardown": {"duration": 0.00021982192993164062, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_paginated_state_list_limit", "lineno": 216, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "test_api_get_paginated_state_list_limit", "third", "run", "api_test", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.00044083595275878906, "outcome": "passed"}, "call": {"duration": 0.0005304813385009766, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 230, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_state", "msg": "Starting test for state with paging parameters", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "filename": "test_rest_api_get_state.py", "module": "test_rest_api_get_state", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 221, "funcName": "test_api_get_paginated_state_list_limit", "created": 1552467758.9493318, "msecs": 949.3317604064941, "relativeCreated": 763549.6509075165, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:38"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31d81400>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_paginated_state_list_limit(self, setup):\n        \"\"\"Tests GET /state is reachable using paging parameters with limit\n        \"\"\"\n        address = setup['address']\n        LOGGER.info(\"Starting test for state with paging parameters\")\n        batch_ids   =  setup['batch_ids']\n        expected_head = setup['expected_head']\n        expected_id = batch_ids[0]\n        params={'limit':1}\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:230: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d81be0>, url = 'http://192.168.1.23:8008/state', allow_redirects = True\nkwargs = {'params': {'limit': 1}, 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00025200843811035156, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_paginated_state_list_start", "lineno": 235, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "test_api_get_paginated_state_list_start", "third", "run", "api_test", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0004458427429199219, "outcome": "passed"}, "call": {"duration": 0.0005767345428466797, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 249, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_state", "msg": "Starting test for state with paging parameters", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "filename": "test_rest_api_get_state.py", "module": "test_rest_api_get_state", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 240, "funcName": "test_api_get_paginated_state_list_start", "created": 1552467758.9690166, "msecs": 969.0165519714355, "relativeCreated": 763569.3356990814, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:38"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31ecabe0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_paginated_state_list_start(self, setup):\n        \"\"\"Tests GET /state is reachbale using paging parameters with start\n        \"\"\"\n        address = setup['address']\n        LOGGER.info(\"Starting test for state with paging parameters\")\n        batch_ids   =  setup['batch_ids']\n        expected_head = setup['expected_head']\n        expected_id = batch_ids[0]\n        params={'limit':1}\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:249: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31eca4e0>, url = 'http://192.168.1.23:8008/state', allow_redirects = True\nkwargs = {'params': {'limit': 1}, 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024175643920898438, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_bad_paging", "lineno": 254, "outcome": "passed", "keywords": ["get/test_rest_api_get_state.py", "third", "run", "api_test", "test_api_get_state_list_bad_paging", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.000431060791015625, "outcome": "passed"}, "call": {"duration": 0.01471400260925293, "outcome": "passed", "log": [{"name": "test_rest_api_get_state", "msg": "Starting test for state with bad paging parameters", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "filename": "test_rest_api_get_state.py", "module": "test_rest_api_get_state", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 259, "funcName": "test_api_get_state_list_bad_paging", "created": 1552467758.98799, "msecs": 987.9899024963379, "relativeCreated": 763588.3090496063, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:38"}]}, "teardown": {"duration": 0.00023126602172851562, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_invalid_start", "lineno": 274, "outcome": "passed", "keywords": ["get/test_rest_api_get_state.py", "third", "run", "TestStateList", "api_test", "state", "()", "get", "test_api_get_state_list_invalid_start"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.00044274330139160156, "outcome": "passed"}, "call": {"duration": 0.020154476165771484, "outcome": "passed", "log": [{"name": "test_rest_api_get_state", "msg": "Starting test for state with invalid start parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "filename": "test_rest_api_get_state.py", "module": "test_rest_api_get_state", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 279, "funcName": "test_api_get_state_list_invalid_start", "created": 1552467759.004136, "msecs": 4.136085510253906, "relativeCreated": 763604.4552326202, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}]}, "teardown": {"duration": 0.00022864341735839844, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_invalid_limit", "lineno": 294, "outcome": "passed", "keywords": ["get/test_rest_api_get_state.py", "third", "run", "test_api_get_state_list_invalid_limit", "api_test", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.00045418739318847656, "outcome": "passed"}, "call": {"duration": 0.014888525009155273, "outcome": "passed", "log": [{"name": "test_rest_api_get_state", "msg": "Starting test for state with bad limit parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "filename": "test_rest_api_get_state.py", "module": "test_rest_api_get_state", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 299, "funcName": "test_api_get_state_list_invalid_limit", "created": 1552467759.0258095, "msecs": 25.809526443481445, "relativeCreated": 763626.1286735535, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}]}, "teardown": {"duration": 0.00022864341735839844, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_list_reversed", "lineno": 313, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "get", "third", "run", "api_test", "state", "()", "test_api_get_state_list_reversed", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0004687309265136719, "outcome": "passed"}, "call": {"duration": 0.0005395412445068359, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 327, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_state", "msg": "Starting test for state with bad head parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "filename": "test_rest_api_get_state.py", "module": "test_rest_api_get_state", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 318, "funcName": "test_api_get_state_list_reversed", "created": 1552467759.0421972, "msecs": 42.197227478027344, "relativeCreated": 763642.516374588, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31e939b0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_list_reversed(self, setup):\n        \"\"\"verifies that GET /state is unreachable with bad head parameter\n        \"\"\"\n        address = setup['address']\n        LOGGER.info(\"Starting test for state with bad head parameter\")\n        batch_ids = setup['batch_ids']\n        expected_head = setup['expected_head']\n        expected_id = batch_ids[0]\n        params = 'reverse'\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:327: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d53be0>, url = 'http://192.168.1.23:8008/state', allow_redirects = True\nkwargs = {'params': 'reverse', 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002589225769042969, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_address_prefix_namespace", "lineno": 335, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "third", "test_api_get_state_data_address_prefix_namespace", "run", "api_test", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.00045299530029296875, "outcome": "passed"}, "call": {"duration": 0.00045371055603027344, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 344, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31dd8588>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_data_address_prefix_namespace(self, setup):\n        \"\"\"Tests the state data address with 6 hex characters long\n        namespace prefix\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:344: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31dd8c50>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00025177001953125, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_head_wildcard_character", "lineno": 353, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "third", "run", "api_test", "state", "()", "get", "TestStateList", "test_api_get_state_data_head_wildcard_character"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.00044274330139160156, "outcome": "passed"}, "call": {"duration": 0.00045752525329589844, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 361, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31e938d0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_data_head_wildcard_character(self, setup):\n        \"\"\"Tests the state head with wildcard_character ***STL-1345***\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:361: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d02400>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002510547637939453, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_head_partial_character", "lineno": 374, "outcome": "failed", "keywords": ["test_api_get_state_data_head_partial_character", "get/test_rest_api_get_state.py", "third", "run", "api_test", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0004367828369140625, "outcome": "passed"}, "call": {"duration": 0.0004534721374511719, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 382, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31dd8470>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_data_head_partial_character(self, setup):\n        \"\"\"Tests the state head with partial head address ***STL-1345***\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:382: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31de42b0>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00025582313537597656, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_address_partial_character", "lineno": 390, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "third", "run", "api_test", "state", "()", "get", "TestStateList", "test_api_get_state_data_address_partial_character"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0004394054412841797, "outcome": "passed"}, "call": {"duration": 0.0004940032958984375, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 398, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31d81f60>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_data_address_partial_character(self, setup):\n        \"\"\"Tests the state address with partial head address ***STL-1346***\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:398: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31cf6b38>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002505779266357422, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_address_length", "lineno": 407, "outcome": "failed", "keywords": ["test_api_get_state_data_address_length", "get/test_rest_api_get_state.py", "third", "run", "api_test", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.00044083595275878906, "outcome": "passed"}, "call": {"duration": 0.0004658699035644531, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 416, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31d17b38>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_data_address_length(self, setup):\n        \"\"\"Tests the state data address length is 70 hex character long\n        with proper prefix namespace\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:416: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d17550>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002474784851074219, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_address_with_odd_hex_value", "lineno": 426, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "third", "run", "api_test", "state", "()", "get", "TestStateList", "test_api_get_state_data_address_with_odd_hex_value"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0004436969757080078, "outcome": "passed"}, "call": {"duration": 0.0004582405090332031, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 435, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31d78cc0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_data_address_with_odd_hex_value(self, setup):\n        \"\"\"Tests the state data address fail with odd hex character\n        address\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:435: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d78940>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00025010108947753906, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_address_with_reduced_length", "lineno": 445, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "third", "run", "api_test", "state", "()", "get", "TestStateList", "test_api_get_state_data_address_with_reduced_length"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0004413127899169922, "outcome": "passed"}, "call": {"duration": 0.0004513263702392578, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 453, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31c7e630>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_data_address_with_reduced_length(self, setup):\n        \"\"\"Tests the state data address with reduced even length hex character long\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:453: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31c7e9e8>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00023889541625976562, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_address_64_Hex", "lineno": 464, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "test_api_get_state_data_address_64_Hex", "third", "run", "api_test", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0004305839538574219, "outcome": "passed"}, "call": {"duration": 0.00042748451232910156, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 472, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31c6e278>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_data_address_64_Hex(self, setup):\n        \"\"\"Tests the state data address with 64 hex give empty data\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:472: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31c6ecc0>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002498626708984375, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_data_address_alter_bytes", "lineno": 484, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "third", "run", "TestStateList", "api_test", "state", "()", "get", "test_api_get_state_data_address_alter_bytes"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0004374980926513672, "outcome": "passed"}, "call": {"duration": 0.00045609474182128906, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 492, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31e9fbe0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_data_address_alter_bytes(self, setup):\n        \"\"\"Tests the state data address with alter bytes give empty data\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:492: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e9f358>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024127960205078125, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_link_val", "lineno": 506, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "third", "run", "api_test", "state", "()", "get", "TestStateList", "test_api_get_state_link_val"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0004322528839111328, "outcome": "passed"}, "call": {"duration": 0.00043582916259765625, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 514, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31e32668>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_link_val(self, setup):\n        \"\"\"Tests/ validate the state parameters with state, head, start and limit\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:514: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e32f98>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002396106719970703, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_state_key_params", "lineno": 526, "outcome": "failed", "keywords": ["test_api_get_state_key_params", "get/test_rest_api_get_state.py", "third", "run", "api_test", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.00043511390686035156, "outcome": "passed"}, "call": {"duration": 0.0004391670227050781, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 534, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31e363c8>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_key_params(self, setup):\n        \"\"\"Tests/ validate the state key parameters with data, head, link and paging\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:534: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e36160>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024199485778808594, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_api_get_each_state_head_length", "lineno": 543, "outcome": "failed", "keywords": ["test_api_get_each_state_head_length", "get/test_rest_api_get_state.py", "third", "run", "api_test", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.00045013427734375, "outcome": "passed"}, "call": {"duration": 0.0004570484161376953, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 551, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31d02240>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_each_state_head_length(self, setup):\n        \"\"\"Tests the each state head length should be 128 hex character long\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:551: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d02cc0>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002474784851074219, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateList::test_rest_api_check_state_count", "lineno": 560, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "third", "run", "api_test", "test_rest_api_check_state_count", "state", "()", "get", "TestStateList"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.00044989585876464844, "outcome": "passed"}, "call": {"duration": 0.0004315376281738281, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 569, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateList object at 0x7f3e31d81fd0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_rest_api_check_state_count(self, setup):\n        \"\"\"Tests state count from state list\n        \"\"\"\n        address = setup['address']\n        count = 0\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:569: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d50eb8>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002474784851074219, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateGet::test_api_get_state_address", "lineno": 579, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "test_api_get_state_address", "third", "run", "api_test", "TestStateGet", "state", "()", "get"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0004458427429199219, "outcome": "passed"}, "call": {"duration": 0.0004334449768066406, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 588, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateGet object at 0x7f3e31d46518>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_address(self, setup):\n        \"\"\"Tests state_address\n        \"\"\"\n        address = setup['address']\n        state_address = setup['state_address'][0]\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state/{}'.format(address,state_address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:588: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d46828>\nurl = 'http://192.168.1.23:8008/state/000000a87cb5eafdcca6a8c983c585ac3c40d976a35072df72591a514cb13f603464f9', allow_redirects = True\nkwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024247169494628906, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateGet::test_api_get_bad_address", "lineno": 592, "outcome": "passed", "keywords": ["get/test_rest_api_get_state.py", "third", "run", "api_test", "TestStateGet", "state", "()", "get", "test_api_get_bad_address"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0004513263702392578, "outcome": "passed"}, "call": {"duration": 0.019934415817260742, "outcome": "passed", "log": [{"name": "test_rest_api_get_state", "msg": "Starting test for state/{bad_address}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_state.py", "filename": "test_rest_api_get_state.py", "module": "test_rest_api_get_state", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 597, "funcName": "test_api_get_bad_address", "created": 1552467759.3424718, "msecs": 342.4718379974365, "relativeCreated": 763942.7909851074, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}]}, "teardown": {"duration": 0.00023746490478515625, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateDeleteRoot::test_api_get_state_delete_root", "lineno": 607, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "TestStateDeleteRoot", "third", "run", "api_test", "state", "()", "get", "test_api_get_state_delete_root"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.00046634674072265625, "outcome": "passed"}, "call": {"duration": 0.0004200935363769531, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 616, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateDeleteRoot object at 0x7f3e31c90630>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_delete_root(self, setup):\n        \"\"\"Tests/ validate the state of deleted block at root node\n        \"\"\"\n        address = setup['address']\n        count = 0\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:616: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31c90e48>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024199485778808594, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_state.py::TestStateDeleteRoot::test_api_get_state_delete_not_root_node", "lineno": 630, "outcome": "failed", "keywords": ["get/test_rest_api_get_state.py", "TestStateDeleteRoot", "third", "run", "api_test", "test_api_get_state_delete_not_root_node", "state", "()", "get"], "metadata": {"0": "Tests the state list by submitting intkey batches\n        ", "1": "Tests that GET /state is reachable with head parameter \n        ", "2": "Tests that state is not updated for when\nsubmitting invalid intkey batches", "3": "Tests that GET /state is unreachable with bad head parameter \n        ", "4": "Tests that GET /state is reachable with address parameter \n        ", "5": "Tests that GET /state is unreachable with bad address parameter \n        ", "6": "Tests GET /state is reachable using paging parameters \n        ", "7": "Tests GET /state is reachable using paging parameters with limit\n        ", "8": "Tests GET /state is reachbale using paging parameters with start \n        ", "9": "Tests GET /state is reachable using bad paging parameters \n        ", "10": "Tests that GET /state is unreachable with invalid start parameter \n        ", "11": "Tests that GET /state is unreachable with bad limit parameter \n        ", "12": "verifies that GET /state is unreachable with bad head parameter \n        ", "13": "Tests the state data address with 6 hex characters long \nnamespace prefix", "14": "Tests the state head with wildcard_character ***STL-1345***\n        ", "15": "Tests the state head with partial head address ***STL-1345***\n        ", "16": "Tests the state address with partial head address ***STL-1346***\n        ", "17": "Tests the state data address length is 70 hex character long\nwith proper prefix namespace", "18": "Tests the state data address fail with odd hex character \naddress ", "19": "Tests the state data address with reduced even length hex character long \n        ", "20": "Tests the state data address with 64 hex give empty data \n        ", "21": "Tests the state data address with alter bytes give empty data \n        ", "22": "Tests/ validate the state parameters with state, head, start and limit\n        ", "23": "Tests/ validate the state key parameters with data, head, link and paging               \n        ", "24": "Tests the each state head length should be 128 hex character long \n        ", "25": "Tests state count from state list \n        ", "26": "Tests state_address              \n        ", "27": "Tests /state/{bad_state_address}                \n        ", "28": "Tests/ validate the state of deleted block at root node\n        ", "29": "Tests/ validate the state of deleted block at not root node\n        "}, "setup": {"duration": 0.0004363059997558594, "outcome": "passed"}, "call": {"duration": 0.0004467964172363281, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_state.py", "lineno": 639, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_state.TestStateDeleteRoot object at 0x7f3e31c6e2b0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_state_delete_not_root_node(self, setup):\n        \"\"\"Tests/ validate the state of deleted block at not root node\n        \"\"\"\n        address = setup['address']\n        count = 0\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/state'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_state.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31c6e518>, url = 'http://192.168.1.23:8008/state', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.000247955322265625, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list", "lineno": 82, "outcome": "failed", "keywords": ["TestBlockList", "run", "api_test", "test_api_get_block_list", "()", "get", "get/test_rest_api_get_block.py", "block", "fourth"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.000461578369140625, "outcome": "passed"}, "call": {"duration": 0.0004379749298095703, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 104, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31d35240>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_block_list(self, setup):\n        \"\"\"Tests the block list by submitting intkey batches\n        \"\"\"\n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_batches = setup['expected_batches']\n        expected_txns = setup['expected_txns']\n        start = setup['start']\n        limit = setup['limit']\n        address = setup['address']\n        payload = setup['payload']\n    \n        expected_link = '{}/blocks?head={}&start={}&limit={}'.format(address,\\\n                         expected_head, start, limit)\n    \n        paging_link = '{}/blocks?head={}&start={}'.format(address,\\\n                         expected_head, start)\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d35358>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002560615539550781, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_head", "lineno": 114, "outcome": "failed", "keywords": ["test_api_get_block_list_head", "TestBlockList", "run", "api_test", "fourth", "()", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.00044608116149902344, "outcome": "passed"}, "call": {"duration": 0.0005645751953125, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 126, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_block", "msg": "Starting test for blocks with head parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_block.py", "filename": "test_rest_api_get_block.py", "module": "test_rest_api_get_block", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 118, "funcName": "test_api_get_block_list_head", "created": 1552467759.421069, "msecs": 421.0689067840576, "relativeCreated": 764021.388053894, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31d272e8>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_block_list_head(self, setup):\n        \"\"\"Tests that GET /blocks is reachable with head parameter\n        \"\"\"\n        LOGGER.info(\"Starting test for blocks with head parameter\")\n        address = setup['address']\n        expected_head = setup['expected_head']\n        params={'head': expected_head}\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d27908>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True\nkwargs = {'params': {'head': 'f940acd87fa0e6851afd942a3855ad8883d2adfedc708c552fb26cdc9307a0c578d1dc27b3e2d4a3336dd4e8ea8704e61948ac47db4236c39ecc8f30f385047b'}, 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002410411834716797, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_bad_head", "lineno": 133, "outcome": "passed", "keywords": ["TestBlockList", "run", "api_test", "fourth", "()", "test_api_get_block_list_bad_head", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.0004341602325439453, "outcome": "passed"}, "call": {"duration": 0.015079021453857422, "outcome": "passed", "log": [{"name": "test_rest_api_get_block", "msg": "Starting test for blocks with bad head parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_block.py", "filename": "test_rest_api_get_block.py", "module": "test_rest_api_get_block", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 137, "funcName": "test_api_get_block_list_bad_head", "created": 1552467759.4396224, "msecs": 439.6224021911621, "relativeCreated": 764039.9415493011, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}]}, "teardown": {"duration": 0.00022935867309570312, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_id", "lineno": 149, "outcome": "failed", "keywords": ["get", "run", "TestBlockList", "fourth", "api_test", "()", "test_api_get_block_list_id", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.0004367828369140625, "outcome": "passed"}, "call": {"duration": 0.0005018711090087891, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 172, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_block", "msg": "Starting test for blocks with id parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_block.py", "filename": "test_rest_api_get_block.py", "module": "test_rest_api_get_block", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 153, "funcName": "test_api_get_block_list_id", "created": 1552467759.4561126, "msecs": 456.1126232147217, "relativeCreated": 764056.4317703247, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31c9dd68>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_block_list_id(self, setup):\n        \"\"\"Tests that GET /blocks is reachable with id as parameter\n        \"\"\"\n        LOGGER.info(\"Starting test for blocks with id parameter\")\n        address = setup['address']\n        signer_key = setup['signer_key']\n        block_ids   =  setup['block_ids']\n        expected_head = setup['expected_head']\n        expected_id = block_ids[0]\n        expected_batches = setup['expected_batches']\n        expected_txns = setup['expected_txns']\n        address = setup['address']\n        payload = setup['payload']\n    \n        expected_link = '{}/blocks?head={}&start&limit=0&id={}'.format(address,\\\n                         expected_head, expected_id)\n    \n        params={'id': expected_id}\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31c9dcc0>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True\nkwargs = {'params': {'id': 'f940acd87fa0e6851afd942a3855ad8883d2adfedc708c552fb26cdc9307a0c578d1dc27b3e2d4a3336dd4e8ea8704e61948ac47db4236c39ecc8f30f385047b'}, 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00025081634521484375, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_bad_id", "lineno": 183, "outcome": "passed", "keywords": ["test_api_get_block_list_bad_id", "TestBlockList", "run", "api_test", "fourth", "()", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.00045990943908691406, "outcome": "passed"}, "call": {"duration": 0.015068531036376953, "outcome": "passed", "log": [{"name": "test_rest_api_get_block", "msg": "Starting test for blocks with bad id parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_block.py", "filename": "test_rest_api_get_block.py", "module": "test_rest_api_get_block", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 187, "funcName": "test_api_get_block_list_bad_id", "created": 1552467759.4751978, "msecs": 475.19779205322266, "relativeCreated": 764075.5169391632, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}]}, "teardown": {"duration": 0.0002346038818359375, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_paginated_block_list", "lineno": 201, "outcome": "passed", "keywords": ["test_api_get_paginated_block_list", "TestBlockList", "run", "api_test", "fourth", "()", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.0004494190216064453, "outcome": "passed"}, "call": {"duration": 0.01790785789489746, "outcome": "passed", "log": [{"name": "test_rest_api_get_block", "msg": "Starting test for blocks with paging parameters", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_block.py", "filename": "test_rest_api_get_block.py", "module": "test_rest_api_get_block", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 205, "funcName": "test_api_get_paginated_block_list", "created": 1552467759.4916935, "msecs": 491.69349670410156, "relativeCreated": 764092.0126438141, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}]}, "teardown": {"duration": 0.0002372264862060547, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_limit", "lineno": 221, "outcome": "failed", "keywords": ["test_api_get_block_list_limit", "TestBlockList", "run", "api_test", "fourth", "()", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.00045943260192871094, "outcome": "passed"}, "call": {"duration": 0.0005364418029785156, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 239, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_block", "msg": "Starting test for batch with paging parameters", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_block.py", "filename": "test_rest_api_get_block.py", "module": "test_rest_api_get_block", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 225, "funcName": "test_api_get_block_list_limit", "created": 1552467759.5111554, "msecs": 511.155366897583, "relativeCreated": 764111.4745140076, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31cc8828>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_block_list_limit(self, setup):\n        \"\"\"Tests GET /batches is reachable with limit\n        \"\"\"\n        LOGGER.info(\"Starting test for batch with paging parameters\")\n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_batches = setup['expected_batches']\n        expected_txns = setup['expected_txns']\n        start = setup['start']\n        limit = setup['limit']\n        address = setup['address']\n        payload = setup['payload']\n        params={'limit':1}\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:239: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31cc89b0>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True\nkwargs = {'params': {'limit': 1}, 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024962425231933594, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_invalid_start", "lineno": 250, "outcome": "passed", "keywords": ["get", "run", "TestBlockList", "fourth", "api_test", "()", "test_api_get_block_list_invalid_start", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.00045180320739746094, "outcome": "passed"}, "call": {"duration": 0.0171051025390625, "outcome": "passed", "log": [{"name": "test_rest_api_get_block", "msg": "Starting test for block with invalid start parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_block.py", "filename": "test_rest_api_get_block.py", "module": "test_rest_api_get_block", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 254, "funcName": "test_api_get_block_list_invalid_start", "created": 1552467759.530502, "msecs": 530.5020809173584, "relativeCreated": 764130.8212280273, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}]}, "teardown": {"duration": 0.00022792816162109375, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_invalid_limit", "lineno": 270, "outcome": "passed", "keywords": ["TestBlockList", "run", "api_test", "fourth", "test_api_get_block_list_invalid_limit", "()", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.0004451274871826172, "outcome": "passed"}, "call": {"duration": 0.015530824661254883, "outcome": "passed", "log": [{"name": "test_rest_api_get_block", "msg": "Starting test for block with bad limit parameter", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_block.py", "filename": "test_rest_api_get_block.py", "module": "test_rest_api_get_block", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 274, "funcName": "test_api_get_block_list_invalid_limit", "created": 1552467759.5490294, "msecs": 549.0293502807617, "relativeCreated": 764149.3484973907, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}]}, "teardown": {"duration": 0.00025272369384765625, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_list_reversed", "lineno": 290, "outcome": "failed", "keywords": ["TestBlockList", "run", "api_test", "fourth", "()", "get", "get/test_rest_api_get_block.py", "block", "test_api_get_block_list_reversed"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.0004897117614746094, "outcome": "passed"}, "call": {"duration": 0.0005388259887695312, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 305, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_block", "msg": "Starting test for blocks with reversed list", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_block.py", "filename": "test_rest_api_get_block.py", "module": "test_rest_api_get_block", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 294, "funcName": "test_api_get_block_list_reversed", "created": 1552467759.5661385, "msecs": 566.138505935669, "relativeCreated": 764166.4576530457, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31e31da0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_block_list_reversed(self, setup):\n        \"\"\"verifies that GET /blocks when reversed\n        \"\"\"\n        LOGGER.info(\"Starting test for blocks with reversed list\")\n        address = setup['address']\n        block_ids = setup['block_ids']\n        expected_head = setup['expected_head']\n        expected_id = block_ids[0]\n    \n        params = 'reverse'\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address), params=params,\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:305: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e310b8>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True\nkwargs = {'params': 'reverse', 'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002510547637939453, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_link_val", "lineno": 314, "outcome": "failed", "keywords": ["TestBlockList", "run", "api_test", "fourth", "()", "get", "test_api_get_block_link_val", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.0004622936248779297, "outcome": "passed"}, "call": {"duration": 0.000492095947265625, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 322, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31c76668>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_block_link_val(self, setup):\n        \"\"\"Verify the GET/ block link  value\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:322: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31c76be0>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024962425231933594, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_block_key_params", "lineno": 334, "outcome": "failed", "keywords": ["test_api_get_block_key_params", "TestBlockList", "run", "api_test", "fourth", "()", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.0004482269287109375, "outcome": "passed"}, "call": {"duration": 0.000461578369140625, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 342, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31e93e80>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_block_key_params(self, setup):\n        \"\"\"Tests/ validate the block key parameters like data, head, link and paging\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:342: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31dd8080>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002529621124267578, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_each_block_batch_id_length", "lineno": 351, "outcome": "failed", "keywords": ["TestBlockList", "run", "test_api_get_each_block_batch_id_length", "fourth", "api_test", "()", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.0004525184631347656, "outcome": "passed"}, "call": {"duration": 0.0004570484161376953, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 359, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31da3208>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_each_block_batch_id_length(self, setup):\n        \"\"\"Tests the each batch id length should be 128 hex character long\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:359: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31da3e10>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00025272369384765625, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_api_get_first_block_id_length", "lineno": 368, "outcome": "failed", "keywords": ["test_api_get_first_block_id_length", "TestBlockList", "run", "api_test", "fourth", "()", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.0004451274871826172, "outcome": "passed"}, "call": {"duration": 0.00045871734619140625, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 376, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31d50358>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_first_block_id_length(self, setup):\n        \"\"\"Tests the first block id length should be 128 hex character long\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:376: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d500b8>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002582073211669922, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_rest_api_check_post_max_batches", "lineno": 387, "outcome": "failed", "keywords": ["TestBlockList", "test_rest_api_check_post_max_batches", "run", "fourth", "api_test", "()", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.0004622936248779297, "outcome": "passed"}, "call": {"duration": 0.0004532337188720703, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 396, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31ee9e80>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_rest_api_check_post_max_batches(self, setup):\n        \"\"\"Tests that allow max post batches in block\n        Handled max 100 batches post in block and handle for extra batch\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:396: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31ee9cc0>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00025010108947753906, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_rest_api_check_head_signature", "lineno": 406, "outcome": "failed", "keywords": ["TestBlockList", "run", "api_test", "fourth", "test_rest_api_check_head_signature", "()", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.00044655799865722656, "outcome": "passed"}, "call": {"duration": 0.0004582405090332031, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 415, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31e45c50>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_rest_api_check_head_signature(self, setup):\n        \"\"\"Tests that head signature of each batch of the block\n        should be not none\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e45400>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.000247955322265625, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_rest_api_check_family_version", "lineno": 425, "outcome": "failed", "keywords": ["test_rest_api_check_family_version", "TestBlockList", "run", "api_test", "fourth", "()", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.00044417381286621094, "outcome": "passed"}, "call": {"duration": 0.0004558563232421875, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 434, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31e36f98>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_rest_api_check_family_version(self, setup):\n        \"\"\"Test batch transaction family version should be present\n        for each transaction header\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:434: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e36978>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024700164794921875, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_rest_api_check_input_output_content", "lineno": 443, "outcome": "failed", "keywords": ["TestBlockList", "run", "api_test", "fourth", "()", "test_rest_api_check_input_output_content", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.0004456043243408203, "outcome": "passed"}, "call": {"duration": 0.00045561790466308594, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 452, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31e7fb00>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_rest_api_check_input_output_content(self,setup):\n        \"\"\"Test batch input and output content should be same for\n        each batch and unique from other\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:452: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e7f240>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024628639221191406, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_rest_api_check_signer_public_key", "lineno": 462, "outcome": "failed", "keywords": ["TestBlockList", "run", "api_test", "fourth", "()", "test_rest_api_check_signer_public_key", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.0004432201385498047, "outcome": "passed"}, "call": {"duration": 0.0004546642303466797, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 471, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31e317f0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_rest_api_check_signer_public_key(self, setup):\n        \"\"\"Tests that signer public key is calculated for a block\n        properly\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:471: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d3dbe0>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00023794174194335938, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_rest_api_check_blocks_count", "lineno": 479, "outcome": "failed", "keywords": ["test_rest_api_check_blocks_count", "TestBlockList", "run", "api_test", "fourth", "()", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.0004305839538574219, "outcome": "passed"}, "call": {"duration": 0.00043773651123046875, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 488, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31c92b00>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_rest_api_check_blocks_count(self, setup):\n        \"\"\"Tests blocks count from block list\n        \"\"\"\n        address = setup['address']\n        count =0\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31c921d0>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002510547637939453, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockList::test_rest_api_blk_content_head_signature", "lineno": 495, "outcome": "failed", "keywords": ["TestBlockList", "run", "api_test", "fourth", "()", "test_rest_api_blk_content_head_signature", "get", "get/test_rest_api_get_block.py", "block"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.00044655799865722656, "outcome": "passed"}, "call": {"duration": 0.0004546642303466797, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 504, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_block.TestBlockList object at 0x7f3e31e83668>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_rest_api_blk_content_head_signature(self, setup):\n        \"\"\"Tests that head signature of each batch of the block\n        should be not none\n        \"\"\"\n        address = setup['address']\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks'.format(address),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:504: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e83080>, url = 'http://192.168.1.23:8008/blocks', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00025653839111328125, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockGet::test_api_get_block_id", "lineno": 517, "outcome": "failed", "keywords": ["run", "test_api_get_block_id", "fourth", "api_test", "()", "get", "get/test_rest_api_get_block.py", "block", "TestBlockGet"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.0004608631134033203, "outcome": "passed"}, "call": {"duration": 0.0005650520324707031, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_block.py", "lineno": 534, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "log": [{"name": "test_rest_api_get_block", "msg": "Starting test for blocks/{block_id}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_block.py", "filename": "test_rest_api_get_block.py", "module": "test_rest_api_get_block", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 521, "funcName": "test_api_get_block_id", "created": 1552467759.8007731, "msecs": 800.7731437683105, "relativeCreated": 764401.0922908783, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}], "longrepr": "self = <test_rest_api_get_block.TestBlockGet object at 0x7f3e31d4f940>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_block_id(self, setup):\n        \"\"\"Tests that GET /blocks/  is reachable with block id\n        \"\"\"\n        LOGGER.info(\"Starting test for blocks/{block_id}\")\n        signer_key = setup['signer_key']\n        expected_head = setup['expected_head']\n        expected_id  = setup['block_ids'][0]\n        expected_batches = setup['expected_batches']\n        expected_txns = setup['expected_txns']\n        payload = setup['payload']\n        address = setup['address']\n        expected_link = '{}/blocks/{}'.format(address, expected_id)\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url='{}/blocks/{}'.format(address,expected_id),\n>                                      raise_for_status=True) as data:\n\nget/test_rest_api_get_block.py:534: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31d50c18>\nurl = 'http://192.168.1.23:8008/blocks/f940acd87fa0e6851afd942a3855ad8883d2adfedc708c552fb26cdc9307a0c578d1dc27b3e2d4a3336dd4e8ea8704e61948ac47db4236c39ecc8f30f385047b'\nallow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.00024271011352539062, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_block.py::TestBlockGet::test_api_get_bad_block_id", "lineno": 543, "outcome": "passed", "keywords": ["run", "api_test", "fourth", "test_api_get_bad_block_id", "()", "get", "get/test_rest_api_get_block.py", "block", "TestBlockGet"], "metadata": {"0": "Tests the block list by submitting intkey batches\n        ", "1": "Tests that GET /blocks is reachable with head parameter \n        ", "2": "Tests that GET /blocks is unreachable with bad head parameter \n        ", "3": "Tests that GET /blocks is reachable with id as parameter \n        ", "4": "Tests that GET /blocks is unreachable with bad id parameter \n        ", "5": "Tests GET /blocks is reachable using paging parameters \n        ", "6": "Tests GET /batches is reachable with limit\n        ", "7": "Tests that GET /blocks is unreachable with invalid start parameter \n        ", "8": "Tests that GET /blocks is unreachable with bad limit parameter \n        ", "9": "verifies that GET /blocks when reversed\n        ", "10": "Verify the GET/ block link  value\n        ", "11": "Tests/ validate the block key parameters like data, head, link and paging               \n        ", "12": "Tests the each batch id length should be 128 hex character long \n        ", "13": "Tests the first block id length should be 128 hex character long \n        ", "14": "Tests that allow max post batches in block\nHandled max 100 batches post in block and handle for extra batch", "15": "Tests that head signature of each batch of the block \nshould be not none ", "16": "Test batch transaction family version should be present \nfor each transaction header", "17": "Test batch input and output content should be same for\neach batch and unique from other", "18": "Tests that signer public key is calculated for a block\nproperly", "19": "Tests blocks count from block list \n        ", "20": "Tests that head signature of each batch of the block\nshould be not none", "21": "Tests that GET /blocks/  is reachable with block id \n        ", "22": "Tests that GET /blocks/ is not reachable with bad id\n        "}, "setup": {"duration": 0.00045871734619140625, "outcome": "passed"}, "call": {"duration": 0.015223979949951172, "outcome": "passed", "log": [{"name": "test_rest_api_get_block", "msg": "Starting test for blocks/{bad_block_id}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/get/test_rest_api_get_block.py", "filename": "test_rest_api_get_block.py", "module": "test_rest_api_get_block", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 547, "funcName": "test_api_get_bad_block_id", "created": 1552467759.8195417, "msecs": 819.5416927337646, "relativeCreated": 764419.8608398438, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}]}, "teardown": {"duration": 0.0002372264862060547, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList::test_api_get_reciept_invalid_id", "lineno": 57, "outcome": "passed", "keywords": ["run", "TestReceiptsList", "api_test", "receipts", "()", "get/test_rest_api_get_receipts.py", "get", "fifth", "test_api_get_reciept_invalid_id"], "metadata": {"0": "Tests the reciepts after submitting invalid transaction\n        ", "1": "Test the get reciepts for multiple transaction.\n        ", "2": "Tests get reciepts response for single transaction", "3": "Test post reciepts response for single transaction", "4": "test reciepts post for invalid transaction", "5": "Test the post reciepts response for multiple transaction.\n       "}, "setup": {"duration": 0.00040078163146972656, "outcome": "passed"}, "call": {"duration": 0.015052080154418945, "outcome": "passed"}, "teardown": {"duration": 0.00023818016052246094, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList::test_api_get_reciepts_multiple_transactions", "lineno": 73, "outcome": "passed", "keywords": ["run", "TestReceiptsList", "api_test", "receipts", "()", "get/test_rest_api_get_receipts.py", "get", "fifth", "test_api_get_reciepts_multiple_transactions"], "metadata": {"0": "Tests the reciepts after submitting invalid transaction\n        ", "1": "Test the get reciepts for multiple transaction.\n        ", "2": "Tests get reciepts response for single transaction", "3": "Test post reciepts response for single transaction", "4": "test reciepts post for invalid transaction", "5": "Test the post reciepts response for multiple transaction.\n       "}, "setup": {"duration": 0.00043582916259765625, "outcome": "passed"}, "call": {"duration": 0.017406702041625977, "outcome": "passed"}, "teardown": {"duration": 0.0002319812774658203, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList::test_api_get_reciepts_single_transactions", "lineno": 98, "outcome": "passed", "keywords": ["test_api_get_reciepts_single_transactions", "run", "TestReceiptsList", "api_test", "receipts", "()", "get/test_rest_api_get_receipts.py", "get", "fifth"], "metadata": {"0": "Tests the reciepts after submitting invalid transaction\n        ", "1": "Test the get reciepts for multiple transaction.\n        ", "2": "Tests get reciepts response for single transaction", "3": "Test post reciepts response for single transaction", "4": "test reciepts post for invalid transaction", "5": "Test the post reciepts response for multiple transaction.\n       "}, "setup": {"duration": 0.00041747093200683594, "outcome": "passed"}, "call": {"duration": 0.01763916015625, "outcome": "passed"}, "teardown": {"duration": 0.00024509429931640625, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList::test_api_post_reciepts_single_transactions", "lineno": 113, "outcome": "passed", "keywords": ["test_api_post_reciepts_single_transactions", "run", "TestReceiptsList", "api_test", "receipts", "()", "get/test_rest_api_get_receipts.py", "get", "fifth"], "metadata": {"0": "Tests the reciepts after submitting invalid transaction\n        ", "1": "Test the get reciepts for multiple transaction.\n        ", "2": "Tests get reciepts response for single transaction", "3": "Test post reciepts response for single transaction", "4": "test reciepts post for invalid transaction", "5": "Test the post reciepts response for multiple transaction.\n       "}, "setup": {"duration": 0.00041556358337402344, "outcome": "passed"}, "call": {"duration": 0.01759815216064453, "outcome": "passed"}, "teardown": {"duration": 0.0002460479736328125, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList::test_api_post_reciepts_invalid_transactions", "lineno": 130, "outcome": "passed", "keywords": ["test_api_post_reciepts_invalid_transactions", "run", "TestReceiptsList", "api_test", "receipts", "()", "get/test_rest_api_get_receipts.py", "get", "fifth"], "metadata": {"0": "Tests the reciepts after submitting invalid transaction\n        ", "1": "Test the get reciepts for multiple transaction.\n        ", "2": "Tests get reciepts response for single transaction", "3": "Test post reciepts response for single transaction", "4": "test reciepts post for invalid transaction", "5": "Test the post reciepts response for multiple transaction.\n       "}, "setup": {"duration": 0.0004258155822753906, "outcome": "passed"}, "call": {"duration": 0.015955448150634766, "outcome": "passed"}, "teardown": {"duration": 0.0002512931823730469, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_receipts.py::TestReceiptsList::test_api_post_reciepts_multiple_transactions", "lineno": 146, "outcome": "passed", "keywords": ["test_api_post_reciepts_multiple_transactions", "run", "TestReceiptsList", "api_test", "receipts", "()", "get/test_rest_api_get_receipts.py", "get", "fifth"], "metadata": {"0": "Tests the reciepts after submitting invalid transaction\n        ", "1": "Test the get reciepts for multiple transaction.\n        ", "2": "Tests get reciepts response for single transaction", "3": "Test post reciepts response for single transaction", "4": "test reciepts post for invalid transaction", "5": "Test the post reciepts response for multiple transaction.\n       "}, "setup": {"duration": 0.0004425048828125, "outcome": "passed"}, "call": {"duration": 0.018189191818237305, "outcome": "passed"}, "teardown": {"duration": 0.0002579689025878906, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_set_inc_txn_dep", "lineno": 102, "outcome": "passed", "keywords": ["sixth", "run", "()", "TestPostTansactionDependencies", "test_set_inc_txn_dep", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0005724430084228516, "outcome": "passed"}, "call": {"duration": 0.7343757152557373, "outcome": "passed", "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 110, "funcName": "test_set_inc_txn_dep", "created": 1552467759.947149, "msecs": 947.1490383148193, "relativeCreated": 764547.4681854248, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 121, "funcName": "test_set_inc_txn_dep", "created": 1552467759.9499598, "msecs": 949.9597549438477, "relativeCreated": 764550.2789020538, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with inc operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 135, "funcName": "test_set_inc_txn_dep", "created": 1552467759.9506874, "msecs": 950.6874084472656, "relativeCreated": 764551.0065555573, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}, {"name": "test_rest_api_dep_txns", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 147, "funcName": "test_set_inc_txn_dep", "created": 1552467759.9509823, "msecs": 950.9823322296143, "relativeCreated": 764551.3014793396, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}, {"name": "test_rest_api_dep_txns", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 162, "funcName": "test_set_inc_txn_dep", "created": 1552467759.9515727, "msecs": 951.5726566314697, "relativeCreated": 764551.8918037415, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:39"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the responses status", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 173, "funcName": "test_set_inc_txn_dep", "created": 1552467760.2645302, "msecs": 264.5301818847656, "relativeCreated": 764864.8493289948, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id bcaac32b45907f94441284aaf58de5ff74fc7b9d062a1c0fc45bc6001a8d369c4d95d9f0b5f0ba72eeb235e48f847ecfc822b83b81a4d5b2bbaac633b8b2b38c is successfully got committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 179, "funcName": "test_set_inc_txn_dep", "created": 1552467760.2647235, "msecs": 264.723539352417, "relativeCreated": 764865.0426864624, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id 9d2446e70dc8584ff62a13f7fa9eb16fda7db8c2f79ee06e5be6554947c875f941bc8ef9986ba84083da79d5b18d10ac5744becd90247c064566275d8b0d9558 is successfully got committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 179, "funcName": "test_set_inc_txn_dep", "created": 1552467760.2648287, "msecs": 264.8286819458008, "relativeCreated": 764865.1478290558, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the txn details listed under the dependencies", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 187, "funcName": "test_set_inc_txn_dep", "created": 1552467760.264915, "msecs": 264.91498947143555, "relativeCreated": 764865.2341365814, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}, {"name": "test_rest_api_dep_txns", "msg": "Successfully got the dependencies for transaction id eaf54e34a237960939e9a0804d4c735c6ed8b6a7ec2b215a7d460868dd173029479f31870fc5a831ac33e778354bc6fd16facdd09629bb7874425c2398e45175", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 193, "funcName": "test_set_inc_txn_dep", "created": 1552467760.2770267, "msecs": 277.0266532897949, "relativeCreated": 764877.3458003998, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}, {"name": "test_rest_api_dep_txns", "msg": "The dependencies for transaction id is blankd59aacff6e62bb61d42cbf7bcc161b2e3d5d62f19650375eaf57e6c2cf36af4564527eeb58b14009e5febb0abe164267fdcbc605a609c548dee0fe7d4cdf0943", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 195, "funcName": "test_set_inc_txn_dep", "created": 1552467760.2886288, "msecs": 288.62881660461426, "relativeCreated": 764888.9479637146, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}, {"name": "utils", "msg": "Checking Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 241, "funcName": "check_for_consensus", "created": 1552467760.653675, "msecs": 653.6750793457031, "relativeCreated": 765253.9942264557, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552467760.6547418, "msecs": 654.7417640686035, "relativeCreated": 765255.0609111786, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552467760.6548622, "msecs": 654.8621654510498, "relativeCreated": 765255.181312561, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}]}, "teardown": {"duration": 0.0004885196685791016, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_rest_api_double_dep_txns", "lineno": 200, "outcome": "passed", "keywords": ["sixth", "run", "()", "test_rest_api_double_dep_txns", "TestPostTansactionDependencies", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0009374618530273438, "outcome": "passed"}, "call": {"duration": 6.243358612060547, "outcome": "passed", "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 209, "funcName": "test_rest_api_double_dep_txns", "created": 1552467760.6847625, "msecs": 684.7624778747559, "relativeCreated": 765285.0816249847, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 219, "funcName": "test_rest_api_double_dep_txns", "created": 1552467760.6883097, "msecs": 688.3096694946289, "relativeCreated": 765288.6288166046, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with inc operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 233, "funcName": "test_rest_api_double_dep_txns", "created": 1552467760.6892161, "msecs": 689.216136932373, "relativeCreated": 765289.5352840424, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with inc operations with dependent transactions as first and second transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 245, "funcName": "test_rest_api_double_dep_txns", "created": 1552467760.6895893, "msecs": 689.589262008667, "relativeCreated": 765289.9084091187, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}, {"name": "test_rest_api_dep_txns", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 257, "funcName": "test_rest_api_double_dep_txns", "created": 1552467760.6899326, "msecs": 689.9325847625732, "relativeCreated": 765290.2517318726, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}, {"name": "test_rest_api_dep_txns", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 272, "funcName": "test_rest_api_double_dep_txns", "created": 1552467760.6908464, "msecs": 690.8464431762695, "relativeCreated": 765291.1655902863, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:40"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the responses status", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 283, "funcName": "test_rest_api_double_dep_txns", "created": 1552467766.5467908, "msecs": 546.7908382415771, "relativeCreated": 771147.1099853516, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id 7beba8660731b2616f80c63c65fa9455462946c9183c0b804d37f5dc946c5fa400a8b1b0f4279cced8b1bfd309d37e16e9824ac4a03282177a442150d6790303 is successfully got committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 289, "funcName": "test_rest_api_double_dep_txns", "created": 1552467766.5470195, "msecs": 547.0194816589355, "relativeCreated": 771147.3386287689, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id f987e1a90457576e76abaf9b4c9a536f0b006d5a8d34716b5c2a6eb308f80f3933e867833a2755dd7def3e8fff58e442ff835013857bafa3c9ec296283bdbb2d is successfully got committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 289, "funcName": "test_rest_api_double_dep_txns", "created": 1552467766.5471554, "msecs": 547.1553802490234, "relativeCreated": 771147.474527359, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id 701da0ceaba5bc4a138b97f7fc929b8e63bc07aa3c457faacea8018074b63907328e10ea45f8d190b18174794b225758f9b243958212d71ac42611f846cac1a4 is successfully got committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 289, "funcName": "test_rest_api_double_dep_txns", "created": 1552467766.5472703, "msecs": 547.2702980041504, "relativeCreated": 771147.5894451141, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the txn details listed under the dependencies", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 297, "funcName": "test_rest_api_double_dep_txns", "created": 1552467766.547373, "msecs": 547.3730564117432, "relativeCreated": 771147.6922035217, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "test_rest_api_dep_txns", "msg": "The dependencies for transaction id is blankd1081e26cd4edf92c7d4b63bee22f8cf1f750711244e611b4cc101efdce606eb3e3fa63628a5a2dec33c4e57e101e116cc85a0afac1e5a4687faa0757ca1879f", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 305, "funcName": "test_rest_api_double_dep_txns", "created": 1552467766.5609531, "msecs": 560.9531402587891, "relativeCreated": 771161.2722873688, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "test_rest_api_dep_txns", "msg": "Successfully got the dependencies for transaction id 0aea74dfc0bf0b18226d05fda438bfa5665a1ad9546fb4eebb1dc071e17fb8306d07b729d82b2d930ce327207d5a77532a14e1656734d09174ef670d9e8bd732", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 303, "funcName": "test_rest_api_double_dep_txns", "created": 1552467766.5745246, "msecs": 574.5246410369873, "relativeCreated": 771174.843788147, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "test_rest_api_dep_txns", "msg": "Successfully got the dependencies for transaction id 192f10ce360b499b97cbd4b0b0b66be946b5cd0f9b062ad3f496439728dac38c38a28d744f420941c5e48c540d0332debeb54fbd6762f8b55315381c05dd2048", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 303, "funcName": "test_rest_api_double_dep_txns", "created": 1552467766.5862088, "msecs": 586.2088203430176, "relativeCreated": 771186.527967453, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "utils", "msg": "Checking Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 241, "funcName": "check_for_consensus", "created": 1552467766.9111323, "msecs": 911.1323356628418, "relativeCreated": 771511.4514827728, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552467766.9113014, "msecs": 911.3013744354248, "relativeCreated": 771511.6205215454, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552467766.9113543, "msecs": 911.3543033599854, "relativeCreated": 771511.67345047, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}]}, "teardown": {"duration": 0.0003070831298828125, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_single_set_dep_txns", "lineno": 310, "outcome": "passed", "keywords": ["test_single_set_dep_txns", "sixth", "run", "()", "TestPostTansactionDependencies", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0005865097045898438, "outcome": "passed"}, "call": {"duration": 6.285429954528809, "outcome": "passed", "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 318, "funcName": "test_single_set_dep_txns", "created": 1552467766.9299045, "msecs": 929.9044609069824, "relativeCreated": 771530.223608017, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 334, "funcName": "test_single_set_dep_txns", "created": 1552467766.9410992, "msecs": 941.0991668701172, "relativeCreated": 771541.4183139801, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with inc operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 348, "funcName": "test_single_set_dep_txns", "created": 1552467766.9418073, "msecs": 941.8072700500488, "relativeCreated": 771542.12641716, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "test_rest_api_dep_txns", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 363, "funcName": "test_single_set_dep_txns", "created": 1552467766.949833, "msecs": 949.8329162597656, "relativeCreated": 771550.1520633698, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "test_rest_api_dep_txns", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 378, "funcName": "test_single_set_dep_txns", "created": 1552467766.950442, "msecs": 950.4420757293701, "relativeCreated": 771550.7612228394, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:46"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the responses status", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 389, "funcName": "test_single_set_dep_txns", "created": 1552467772.7815895, "msecs": 781.5895080566406, "relativeCreated": 777381.9086551666, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:52"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id 5fd5ba59500c11b8846dba36fe92a8e5bd163024d8cefadb8ddffa85849b4dd04bdf9f58a71ffb1bfcee730c4f20fea746277ba6ccf5a3ff5b7c8cd7dc89d7f9 is successfully got committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 397, "funcName": "test_single_set_dep_txns", "created": 1552467772.781764, "msecs": 781.764030456543, "relativeCreated": 777382.0831775665, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:52"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id 17d4ec4f50652f4ea495fe0b4753bcdf3570f96d9bd7bebf60976c8fa99796f84c1c9a292db0d49ae20932bbaa3f86b90f035abc45eee34f15d2b0d5a32685df is successfully got committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 397, "funcName": "test_single_set_dep_txns", "created": 1552467772.7818613, "msecs": 781.8613052368164, "relativeCreated": 777382.1804523468, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:52"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the txn details listed under the dependencies", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 408, "funcName": "test_single_set_dep_txns", "created": 1552467772.781943, "msecs": 781.9430828094482, "relativeCreated": 777382.2622299194, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:52"}, {"name": "test_rest_api_dep_txns", "msg": "The dependencies for transaction id is blank67d9baf56273b8a6d142dbc6fd69fe7ff8d1cbebfc0859f07d6e0deaac2f475340adc3793480677764fbfc520cf65e101175c9f8c7eee3dfddb9ad83e2c01f0d", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 416, "funcName": "test_single_set_dep_txns", "created": 1552467772.7923648, "msecs": 792.3648357391357, "relativeCreated": 777392.6839828491, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:52"}, {"name": "test_rest_api_dep_txns", "msg": "Successfully got the dependencies for transaction id 112c0750fb020e684c22caf7b9c698cb25dfe6ed300daa74ad0575847d06a05d720566fc20fa6e337529c956ecbcfacda29814d3cba890a8bea87fee284f4594", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 414, "funcName": "test_single_set_dep_txns", "created": 1552467772.802963, "msecs": 802.9630184173584, "relativeCreated": 777403.2821655273, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:52"}, {"name": "utils", "msg": "Checking Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 241, "funcName": "check_for_consensus", "created": 1552467773.194881, "msecs": 194.88096237182617, "relativeCreated": 777795.2001094818, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:53"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552467773.1950846, "msecs": 195.0845718383789, "relativeCreated": 777795.4037189484, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:53"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552467773.1951547, "msecs": 195.15466690063477, "relativeCreated": 777795.4738140106, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:53"}]}, "teardown": {"duration": 0.0004169940948486328, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_rest_api_single_set_dec_txns", "lineno": 421, "outcome": "failed", "keywords": ["sixth", "run", "()", "test_rest_api_single_set_dec_txns", "TestPostTansactionDependencies", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0008244514465332031, "outcome": "passed"}, "call": {"duration": 300.03445744514465, "outcome": "failed", "crash": {"path": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "lineno": 503, "message": "KeyError: 'data'"}, "traceback": [{"path": "dep_txns/test_rest_api_dep_txns.py", "lineno": 503, "message": "KeyError"}], "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 429, "funcName": "test_rest_api_single_set_dec_txns", "created": 1552467773.2180543, "msecs": 218.05429458618164, "relativeCreated": 777818.3734416962, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:53"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 445, "funcName": "test_rest_api_single_set_dec_txns", "created": 1552467773.2329159, "msecs": 232.91587829589844, "relativeCreated": 777833.2350254059, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:53"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with inc operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 459, "funcName": "test_rest_api_single_set_dec_txns", "created": 1552467773.2337546, "msecs": 233.75463485717773, "relativeCreated": 777834.0737819672, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:53"}, {"name": "test_rest_api_dep_txns", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 472, "funcName": "test_rest_api_single_set_dec_txns", "created": 1552467773.2340515, "msecs": 234.05146598815918, "relativeCreated": 777834.3706130981, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:53"}, {"name": "test_rest_api_dep_txns", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 487, "funcName": "test_rest_api_single_set_dec_txns", "created": 1552467773.2346394, "msecs": 234.63940620422363, "relativeCreated": 777834.9585533142, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:32:53"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the responses status", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 498, "funcName": "test_rest_api_single_set_dec_txns", "created": 1552468073.2505848, "msecs": 250.58484077453613, "relativeCreated": 1077850.9039878845, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id a1664e1dba9f8a7a7bd7de3def5aac1c5d177b0af1a74818938c5b37de1a8ee10b092c063a927da036bc29d8e03c2c9576b2ec0211bf5513dd165729615946d7 is successfully got committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 506, "funcName": "test_rest_api_single_set_dec_txns", "created": 1552468073.250903, "msecs": 250.90289115905762, "relativeCreated": 1077851.222038269, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}], "longrepr": "self = <test_rest_api_dep_txns.TestPostTansactionDependencies object at 0x7f3e31ce9fd0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_rest_api_single_set_dec_txns(self, setup):\n        \"\"\"\"1. Create first Transaction for set\n            2. Create second Transaction for decrement with single dependecies\n            3. Create Batch\n            4. Call POST /batches \"\n            Verify the transactions\n        \"\"\"\n        LOGGER.info('Starting test for batch post')\n    \n        signer = get_signer()\n        expected_trxn_ids  = []\n        expected_batch_ids = []\n        address = _get_client_address()\n        url='{}/batches'.format(address)\n        tasks=[]\n        t = datetime.datetime.now()\n        date = t.strftime('%H%M%S')\n        words = random_word_list(100)\n        name=random.choice(words)\n    \n        #name=random.choice('123456734558909877yuyiipp879798788')\n    \n    \n        LOGGER.info(\"Creating intkey transactions with set operations\")\n    \n        txns = [\n            create_intkey_transaction_dep(\"set\", [] , name, 50, signer),]\n        for txn in txns:\n            data = MessageToDict(\n                    txn,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            trxn_id = data['header_signature']\n            expected_trxn_ids.append(trxn_id)\n    \n    \n        LOGGER.info(\"Creating intkey transactions with inc operations with dependent transactions as first transaction\")\n        trxn_ids = expected_trxn_ids\n        #name=random.choice('123456734558909877')\n        txns.append(create_intkey_transaction_dep(\"dec\",trxn_ids , name, 60, signer))\n        for txn in txns:\n            data = MessageToDict(\n                    txn,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            trxn_id = data['header_signature']\n            expected_trxn_ids.append(trxn_id)\n    \n        LOGGER.info(\"Creating batches for transactions 1trn/batch\")\n    \n        batches = [create_batch([txn], signer) for txn in txns]\n    \n        for batch in batches:\n            data = MessageToDict(\n                    batch,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            batch_id = data['header_signature']\n            expected_batch_ids.append(batch_id)\n    \n        post_batch_list = [BatchList(batches=[batch]).SerializeToString() for batch in batches]\n    \n        LOGGER.info(\"Submitting batches to the handlers\")\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                for batch in post_batch_list:\n                    task = asyncio.ensure_future(async_post_batch(url,session,data=batch))\n                    tasks.append(task)\n                responses = await asyncio.gather(*tasks)\n        except aiohttp.client_exceptions.ClientResponseError as error:\n            LOGGER.info(\"Rest Api is Unreachable\")\n    \n        LOGGER.info(\"Verifying the responses status\")\n    \n        for response in responses:\n            #batch_id = response['data'][0]['id']\n    \n>           if response['data'][0]['status'] == 'COMMITTED':\nE           KeyError: 'data'\n\ndep_txns/test_rest_api_dep_txns.py:503: KeyError"}, "teardown": {"duration": 0.00030112266540527344, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_rest_api_set_inc_inc_Txns_Dep", "lineno": 522, "outcome": "passed", "keywords": ["sixth", "run", "()", "test_rest_api_set_inc_inc_Txns_Dep", "TestPostTansactionDependencies", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0005655288696289062, "outcome": "passed"}, "call": {"duration": 0.7790014743804932, "outcome": "passed", "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 531, "funcName": "test_rest_api_set_inc_inc_Txns_Dep", "created": 1552468073.2788606, "msecs": 278.86056900024414, "relativeCreated": 1077879.1797161102, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 541, "funcName": "test_rest_api_set_inc_inc_Txns_Dep", "created": 1552468073.2814991, "msecs": 281.49914741516113, "relativeCreated": 1077881.8182945251, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with inc operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 555, "funcName": "test_rest_api_set_inc_inc_Txns_Dep", "created": 1552468073.2821915, "msecs": 282.19151496887207, "relativeCreated": 1077882.5106620789, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with inc operations with dependent transactions as second transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 567, "funcName": "test_rest_api_set_inc_inc_Txns_Dep", "created": 1552468073.282464, "msecs": 282.46402740478516, "relativeCreated": 1077882.7831745148, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "test_rest_api_dep_txns", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 579, "funcName": "test_rest_api_set_inc_inc_Txns_Dep", "created": 1552468073.2827322, "msecs": 282.7322483062744, "relativeCreated": 1077883.0513954163, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "test_rest_api_dep_txns", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 594, "funcName": "test_rest_api_set_inc_inc_Txns_Dep", "created": 1552468073.2834513, "msecs": 283.4513187408447, "relativeCreated": 1077883.7704658508, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the responses status", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 605, "funcName": "test_rest_api_set_inc_inc_Txns_Dep", "created": 1552468073.6004555, "msecs": 600.4555225372314, "relativeCreated": 1078200.7746696472, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id c3deb96161e19881fa9ed1753fa861672cc1a83e2f8c971a3054b921a956da4d26b84a199a7fcdc63ac5761694dbdb9e671c1dfb93af62d616ee3b2c4f74d1dc is successfully got committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 611, "funcName": "test_rest_api_set_inc_inc_Txns_Dep", "created": 1552468073.6007965, "msecs": 600.7964611053467, "relativeCreated": 1078201.1156082153, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id 4ee6ebfe561bea0caf003a8079b2454ec43d5247af7ecf8ed6b90db9dcc906393b6ae70b977621a0cdb9b742f1103015b3d4672289265aabe051fc2aa0cd4aef is successfully got committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 611, "funcName": "test_rest_api_set_inc_inc_Txns_Dep", "created": 1552468073.6010094, "msecs": 601.0093688964844, "relativeCreated": 1078201.3285160065, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id d33d795b5b9768837e25b86797adf782453d5717645c2d7fc96536b0239ebad2565ede4adc8916e74d9325887eb17eaedbf6b0c14834c58dac8afa337eab77d0 is not committed. Status is UNKNOWN", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 617, "funcName": "test_rest_api_set_inc_inc_Txns_Dep", "created": 1552468073.6012075, "msecs": 601.2074947357178, "relativeCreated": 1078201.5266418457, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the txn details listed under the dependencies", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 619, "funcName": "test_rest_api_set_inc_inc_Txns_Dep", "created": 1552468073.601418, "msecs": 601.4180183410645, "relativeCreated": 1078201.737165451, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "test_rest_api_dep_txns", "msg": "Successfully got the dependencies for transaction id 1cbcaf7c68b256dadf25f817ab63eb52e1520b69bd1411983c807c4bad78b7fc4e58d0ba1cfdd5cd3e5cdce9f1b9869c97a341f463059805768d0da9c061375a", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 625, "funcName": "test_rest_api_set_inc_inc_Txns_Dep", "created": 1552468073.6154833, "msecs": 615.483283996582, "relativeCreated": 1078215.8024311066, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "test_rest_api_dep_txns", "msg": "The dependencies for transaction id is blankadf366c8e9835cbe91319a640ec213b4790efb4c3aa680d30f58eb5bbb359be72830b9c588b446a4ef069b9297cc27da58195f833682faf0fe7108d7575ab4de", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 627, "funcName": "test_rest_api_set_inc_inc_Txns_Dep", "created": 1552468073.628913, "msecs": 628.9129257202148, "relativeCreated": 1078229.2320728302, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "test_rest_api_dep_txns", "msg": "Successfully got the dependencies for transaction id 7b59beb5ec7ab22d2ae92c46f79b309ab0bd0d7a416468e3067e3891626e22ca5d7089b063bda89831e01d5f136ecf3ccd5d67c74e5c43301eb5a8b1f85b653c", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 625, "funcName": "test_rest_api_set_inc_inc_Txns_Dep", "created": 1552468073.6425388, "msecs": 642.5387859344482, "relativeCreated": 1078242.8579330444, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:53"}, {"name": "utils", "msg": "Checking Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 241, "funcName": "check_for_consensus", "created": 1552468074.0407934, "msecs": 40.793418884277344, "relativeCreated": 1078641.1125659943, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:54"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552468074.040959, "msecs": 40.95888137817383, "relativeCreated": 1078641.2780284882, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:54"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552468074.0410106, "msecs": 41.01061820983887, "relativeCreated": 1078641.3297653198, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:54"}]}, "teardown": {"duration": 0.00028586387634277344, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_rest_api_single_set_dec_same_txns", "lineno": 632, "outcome": "passed", "keywords": ["sixth", "run", "()", "TestPostTansactionDependencies", "test_rest_api_single_set_dec_same_txns", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.000579833984375, "outcome": "passed"}, "call": {"duration": 6.210493564605713, "outcome": "passed", "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 640, "funcName": "test_rest_api_single_set_dec_same_txns", "created": 1552468074.0596948, "msecs": 59.694766998291016, "relativeCreated": 1078660.0139141083, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:54"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 656, "funcName": "test_rest_api_single_set_dec_same_txns", "created": 1552468074.07087, "msecs": 70.86992263793945, "relativeCreated": 1078671.189069748, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:54"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with inc operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 670, "funcName": "test_rest_api_single_set_dec_same_txns", "created": 1552468074.0715597, "msecs": 71.55966758728027, "relativeCreated": 1078671.8788146973, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:54"}, {"name": "test_rest_api_dep_txns", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 683, "funcName": "test_rest_api_single_set_dec_same_txns", "created": 1552468074.0718274, "msecs": 71.82741165161133, "relativeCreated": 1078672.1465587616, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:54"}, {"name": "test_rest_api_dep_txns", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 698, "funcName": "test_rest_api_single_set_dec_same_txns", "created": 1552468074.0723712, "msecs": 72.37124443054199, "relativeCreated": 1078672.6903915405, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:54"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the responses status", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 709, "funcName": "test_rest_api_single_set_dec_same_txns", "created": 1552468079.8009262, "msecs": 800.9262084960938, "relativeCreated": 1084401.245355606, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:59"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id 9aac14fe0a924f79efbfbbe3ab51047d21cb9a892b294f703523d83837828433368a80b80dc4e1323d800acb8ca0fda694fb26f5520d738385963b474c7b02f0 is successfully got committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 717, "funcName": "test_rest_api_single_set_dec_same_txns", "created": 1552468079.8011312, "msecs": 801.1312484741211, "relativeCreated": 1084401.450395584, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:59"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id 9aac14fe0a924f79efbfbbe3ab51047d21cb9a892b294f703523d83837828433368a80b80dc4e1323d800acb8ca0fda694fb26f5520d738385963b474c7b02f0 is successfully got committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 717, "funcName": "test_rest_api_single_set_dec_same_txns", "created": 1552468079.8012455, "msecs": 801.2454509735107, "relativeCreated": 1084401.5645980835, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:59"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the txn details listed under the dependencies", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 727, "funcName": "test_rest_api_single_set_dec_same_txns", "created": 1552468079.8013382, "msecs": 801.3381958007812, "relativeCreated": 1084401.6573429108, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:37:59"}, {"name": "utils", "msg": "Checking Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 241, "funcName": "check_for_consensus", "created": 1552468080.2437944, "msecs": 243.79444122314453, "relativeCreated": 1084844.1135883331, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:00"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552468080.2441182, "msecs": 244.11821365356445, "relativeCreated": 1084844.4373607635, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:00"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552468080.244234, "msecs": 244.2340850830078, "relativeCreated": 1084844.553232193, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:00"}]}, "teardown": {"duration": 0.00042366981506347656, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_rest_api_single_set_dec_invalid_txns_id", "lineno": 741, "outcome": "passed", "keywords": ["sixth", "run", "()", "TestPostTansactionDependencies", "test_rest_api_single_set_dec_invalid_txns_id", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0009317398071289062, "outcome": "passed"}, "call": {"duration": 6.193633317947388, "outcome": "passed", "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 749, "funcName": "test_rest_api_single_set_dec_invalid_txns_id", "created": 1552468080.2732532, "msecs": 273.2532024383545, "relativeCreated": 1084873.5723495483, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:00"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 765, "funcName": "test_rest_api_single_set_dec_invalid_txns_id", "created": 1552468080.2864337, "msecs": 286.4336967468262, "relativeCreated": 1084886.7528438568, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:00"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with inc operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 779, "funcName": "test_rest_api_single_set_dec_invalid_txns_id", "created": 1552468080.2872086, "msecs": 287.20855712890625, "relativeCreated": 1084887.527704239, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:00"}, {"name": "test_rest_api_dep_txns", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 792, "funcName": "test_rest_api_single_set_dec_invalid_txns_id", "created": 1552468080.2875116, "msecs": 287.51158714294434, "relativeCreated": 1084887.830734253, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:00"}, {"name": "test_rest_api_dep_txns", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 807, "funcName": "test_rest_api_single_set_dec_invalid_txns_id", "created": 1552468080.2880855, "msecs": 288.0854606628418, "relativeCreated": 1084888.4046077728, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:00"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the responses status", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 818, "funcName": "test_rest_api_single_set_dec_invalid_txns_id", "created": 1552468086.0621305, "msecs": 62.13045120239258, "relativeCreated": 1090662.4495983124, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:06"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id e37af68692608fae27566d0c18a3dcacaa64b65444ef753ec73e50fea9f1ad60311417d18a8e78b76d142f425e62c723b77da5d49676827ee623dae97545e657 is successfully got committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 826, "funcName": "test_rest_api_single_set_dec_invalid_txns_id", "created": 1552468086.0623791, "msecs": 62.37912178039551, "relativeCreated": 1090662.6982688904, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:06"}, {"name": "test_rest_api_dep_txns", "msg": "Batch with id e37af68692608fae27566d0c18a3dcacaa64b65444ef753ec73e50fea9f1ad60311417d18a8e78b76d142f425e62c723b77da5d49676827ee623dae97545e657 is not committed. Status is UNKNOWN", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 835, "funcName": "test_rest_api_single_set_dec_invalid_txns_id", "created": 1552468086.0625215, "msecs": 62.52145767211914, "relativeCreated": 1090662.840604782, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:06"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the txn details listed under the dependencies", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 836, "funcName": "test_rest_api_single_set_dec_invalid_txns_id", "created": 1552468086.0626333, "msecs": 62.63327598571777, "relativeCreated": 1090662.9524230957, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:06"}, {"name": "utils", "msg": "Checking Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 241, "funcName": "check_for_consensus", "created": 1552468086.4491937, "msecs": 449.19371604919434, "relativeCreated": 1091049.5128631592, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:06"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552468086.4493818, "msecs": 449.38182830810547, "relativeCreated": 1091049.700975418, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:06"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552468086.4494371, "msecs": 449.43714141845703, "relativeCreated": 1091049.7562885284, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:06"}]}, "teardown": {"duration": 0.0002923011779785156, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_single_set_dep_reverse", "lineno": 849, "outcome": "passed", "keywords": ["sixth", "run", "()", "TestPostTansactionDependencies", "dependent", "api_test", "test_single_set_dep_reverse", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0005600452423095703, "outcome": "passed"}, "call": {"duration": 6.217431306838989, "outcome": "passed", "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 857, "funcName": "test_single_set_dep_reverse", "created": 1552468086.4686563, "msecs": 468.6563014984131, "relativeCreated": 1091068.9754486084, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:06"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 873, "funcName": "test_single_set_dep_reverse", "created": 1552468086.4797516, "msecs": 479.7515869140625, "relativeCreated": 1091080.070734024, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:06"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with inc operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 887, "funcName": "test_single_set_dep_reverse", "created": 1552468086.4804444, "msecs": 480.44443130493164, "relativeCreated": 1091080.763578415, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:06"}, {"name": "test_rest_api_dep_txns", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 902, "funcName": "test_single_set_dep_reverse", "created": 1552468086.4884262, "msecs": 488.42620849609375, "relativeCreated": 1091088.745355606, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:06"}, {"name": "test_rest_api_dep_txns", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 917, "funcName": "test_single_set_dep_reverse", "created": 1552468086.4890337, "msecs": 489.03369903564453, "relativeCreated": 1091089.3528461456, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:06"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the responses status", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 930, "funcName": "test_single_set_dep_reverse", "created": 1552468092.2526476, "msecs": 252.64763832092285, "relativeCreated": 1096852.966785431, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:12"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the txn details listed under the dependencies", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 949, "funcName": "test_single_set_dep_reverse", "created": 1552468092.2528403, "msecs": 252.8402805328369, "relativeCreated": 1096853.1594276428, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:12"}, {"name": "utils", "msg": "Checking Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 241, "funcName": "check_for_consensus", "created": 1552468092.6631958, "msecs": 663.1958484649658, "relativeCreated": 1097263.514995575, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:12"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552468092.663429, "msecs": 663.4290218353271, "relativeCreated": 1097263.7481689453, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:12"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552468092.6635284, "msecs": 663.5284423828125, "relativeCreated": 1097263.8475894928, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:12"}]}, "teardown": {"duration": 0.00048041343688964844, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_valid_set_invalid_inc_txn_dep", "lineno": 955, "outcome": "failed", "keywords": ["sixth", "run", "test_valid_set_invalid_inc_txn_dep", "()", "TestPostTansactionDependencies", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0009737014770507812, "outcome": "passed"}, "call": {"duration": 300.0329740047455, "outcome": "failed", "crash": {"path": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "lineno": 1027, "message": "KeyError: 'data'"}, "traceback": [{"path": "dep_txns/test_rest_api_dep_txns.py", "lineno": 1027, "message": "KeyError"}], "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 963, "funcName": "test_valid_set_invalid_inc_txn_dep", "created": 1552468092.689154, "msecs": 689.1539096832275, "relativeCreated": 1097289.4730567932, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 974, "funcName": "test_valid_set_invalid_inc_txn_dep", "created": 1552468092.7021022, "msecs": 702.1021842956543, "relativeCreated": 1097302.4213314056, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating invalid intkey transactions with inc operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 987, "funcName": "test_valid_set_invalid_inc_txn_dep", "created": 1552468092.7028391, "msecs": 702.8391361236572, "relativeCreated": 1097303.1582832336, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 999, "funcName": "test_valid_set_invalid_inc_txn_dep", "created": 1552468092.7031267, "msecs": 703.1266689300537, "relativeCreated": 1097303.44581604, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:12"}, {"name": "test_rest_api_dep_txns", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1014, "funcName": "test_valid_set_invalid_inc_txn_dep", "created": 1552468092.7036989, "msecs": 703.6988735198975, "relativeCreated": 1097304.0180206299, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:38:12"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the responses status", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1025, "funcName": "test_valid_set_invalid_inc_txn_dep", "created": 1552468392.7212555, "msecs": 721.2555408477783, "relativeCreated": 1397321.5746879578, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:43:12"}], "longrepr": "self = <test_rest_api_dep_txns.TestPostTansactionDependencies object at 0x7f3e31cc8550>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_valid_set_invalid_inc_txn_dep(self, setup):\n        \"\"\"1. Create first Transaction for set\n        2. Create second invalid Transaction for increment with first Transaction as dependecies\n        3. Create Batch\n        4. Call POST /batches\n        Verify the transactions. This should be an invalid transaction. The third txn will be in PENDING state\n        \"\"\"\n        LOGGER.info('Starting test for batch post')\n    \n        signer = get_signer()\n        expected_trxn_ids  = []\n        expected_batch_ids = []\n        address = _get_client_address()\n        url='{}/batches'.format(address)\n        tasks=[]\n        words = random_word_list(200)\n        name=random.choice(words)\n    \n        LOGGER.info(\"Creating intkey transactions with set operations\")\n    \n        txns = [\n            create_intkey_transaction_dep(\"set\", [] , name, 50, signer),]\n        for txn in txns:\n            data = MessageToDict(\n                    txn,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            trxn_id = data['header_signature']\n            expected_trxn_ids.append(trxn_id)\n    \n        LOGGER.info(\"Creating invalid intkey transactions with inc operations with dependent transactions as first transaction\")\n        trxn_ids = expected_trxn_ids\n        txns.append(create_intkey_transaction_dep(\"inc\", trxn_ids , name, -1, signer))\n        for txn in txns:\n            data = MessageToDict(\n                    txn,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            trxn_id = data['header_signature']\n            expected_trxn_ids.append(trxn_id)\n    \n        LOGGER.info(\"Creating batches for transactions 1trn/batch\")\n    \n        batches = [create_batch([txn], signer) for txn in txns]\n    \n        for batch in batches:\n            data = MessageToDict(\n                    batch,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            batch_id = data['header_signature']\n            expected_batch_ids.append(batch_id)\n    \n        post_batch_list = [BatchList(batches=[batch]).SerializeToString() for batch in batches]\n    \n        LOGGER.info(\"Submitting batches to the handlers\")\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                for batch in post_batch_list:\n                    task = asyncio.ensure_future(async_post_batch(url,session,data=batch))\n                    tasks.append(task)\n                responses = await asyncio.gather(*tasks)\n        except aiohttp.client_exceptions.ClientResponseError as error:\n            LOGGER.info(\"Rest Api is Unreachable\")\n    \n        LOGGER.info(\"Verifying the responses status\")\n    \n>       assert 'COMMITTED' == responses[0]['data'][0]['status']\nE       KeyError: 'data'\n\ndep_txns/test_rest_api_dep_txns.py:1027: KeyError"}, "teardown": {"duration": 0.00029397010803222656, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_valid_set_invalid_inc_DiffKey_txn_dep", "lineno": 1033, "outcome": "failed", "keywords": ["sixth", "run", "()", "TestPostTansactionDependencies", "test_valid_set_invalid_inc_DiffKey_txn_dep", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0005571842193603516, "outcome": "passed"}, "call": {"duration": 300.0280272960663, "outcome": "failed", "crash": {"path": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "lineno": 1110, "message": "KeyError: 'data'"}, "traceback": [{"path": "dep_txns/test_rest_api_dep_txns.py", "lineno": 1110, "message": "KeyError"}], "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1041, "funcName": "test_valid_set_invalid_inc_DiffKey_txn_dep", "created": 1552468392.7492049, "msecs": 749.2048740386963, "relativeCreated": 1397349.5240211487, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:43:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1052, "funcName": "test_valid_set_invalid_inc_DiffKey_txn_dep", "created": 1552468392.7600784, "msecs": 760.0784301757812, "relativeCreated": 1397360.3975772858, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:43:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating invalid intkey transactions with inc operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1065, "funcName": "test_valid_set_invalid_inc_DiffKey_txn_dep", "created": 1552468392.7607718, "msecs": 760.7717514038086, "relativeCreated": 1397361.0908985138, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:43:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1079, "funcName": "test_valid_set_invalid_inc_DiffKey_txn_dep", "created": 1552468392.7610502, "msecs": 761.0502243041992, "relativeCreated": 1397361.3693714142, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:43:12"}, {"name": "test_rest_api_dep_txns", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1096, "funcName": "test_valid_set_invalid_inc_DiffKey_txn_dep", "created": 1552468392.7616072, "msecs": 761.6071701049805, "relativeCreated": 1397361.926317215, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:43:12"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the responses status", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1107, "funcName": "test_valid_set_invalid_inc_DiffKey_txn_dep", "created": 1552468692.7759798, "msecs": 775.97975730896, "relativeCreated": 1697376.298904419, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:48:12"}], "longrepr": "self = <test_rest_api_dep_txns.TestPostTansactionDependencies object at 0x7f3e31d8d7b8>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_valid_set_invalid_inc_DiffKey_txn_dep(self, setup):\n        \"\"\"1. Create first Transaction for set\n        2. Create second invalid Transaction for increment with first Transaction as dependecies with different key\n        3. Create Batch\n        4. Call POST /batches\n        Verify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state\n        \"\"\"\n        LOGGER.info('Starting test for batch post')\n    \n        signer = get_signer()\n        expected_trxn_ids  = []\n        expected_batch_ids = []\n        address = _get_client_address()\n        url='{}/batches'.format(address)\n        tasks=[]\n        words = random_word_list(200)\n        name=random.choice(words)\n    \n        LOGGER.info(\"Creating intkey transactions with set operations\")\n    \n        txns = [\n            create_intkey_transaction_dep(\"set\", [] , name, 50, signer),]\n        for txn in txns:\n            data = MessageToDict(\n                    txn,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            trxn_id = data['header_signature']\n            expected_trxn_ids.append(trxn_id)\n    \n        LOGGER.info(\"Creating invalid intkey transactions with inc operations with dependent transactions as first transaction\")\n        trxn_ids = expected_trxn_ids\n    \n        name = random.choice(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\")\n        txns.append(create_intkey_transaction_dep(\"inc\", trxn_ids , name, -1, signer))\n        for txn in txns:\n            data = MessageToDict(\n                    txn,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            trxn_id = data['header_signature']\n            expected_trxn_ids.append(trxn_id)\n    \n        LOGGER.info(\"Creating batches for transactions 1trn/batch\")\n    \n        batches = [create_batch([txn], signer) for txn in txns]\n    \n        for batch in batches:\n            data = MessageToDict(\n                    batch,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            batch_id = data['header_signature']\n            expected_batch_ids.append(batch_id)\n    \n    \n    \n        post_batch_list = [BatchList(batches=[batch]).SerializeToString() for batch in batches]\n    \n        LOGGER.info(\"Submitting batches to the handlers\")\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                for batch in post_batch_list:\n                    task = asyncio.ensure_future(async_post_batch(url,session,data=batch))\n                    tasks.append(task)\n                responses = await asyncio.gather(*tasks)\n        except aiohttp.client_exceptions.ClientResponseError as error:\n            LOGGER.info(\"Rest Api is Unreachable\")\n    \n        LOGGER.info(\"Verifying the responses status\")\n    \n        assert 'COMMITTED' == responses[0]['data'][0]['status']\n>       assert 'INVALID' == responses[1]['data'][0]['status']\nE       KeyError: 'data'\n\ndep_txns/test_rest_api_dep_txns.py:1110: KeyError"}, "teardown": {"duration": 0.0002989768981933594, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_set_Max_txn_dep", "lineno": 1115, "outcome": "failed", "keywords": ["sixth", "run", "test_set_Max_txn_dep", "()", "TestPostTansactionDependencies", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0005712509155273438, "outcome": "passed"}, "call": {"duration": 300.0289046764374, "outcome": "failed", "crash": {"path": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "lineno": 1187, "message": "KeyError: 'data'"}, "traceback": [{"path": "dep_txns/test_rest_api_dep_txns.py", "lineno": 1187, "message": "KeyError"}], "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1123, "funcName": "test_set_Max_txn_dep", "created": 1552468692.805129, "msecs": 805.1290512084961, "relativeCreated": 1697405.4481983185, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:48:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1134, "funcName": "test_set_Max_txn_dep", "created": 1552468692.8161433, "msecs": 816.143274307251, "relativeCreated": 1697416.4624214172, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:48:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating invalid intkey transactions with inc operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1147, "funcName": "test_set_Max_txn_dep", "created": 1552468692.8168488, "msecs": 816.8487548828125, "relativeCreated": 1697417.1679019928, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:48:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1159, "funcName": "test_set_Max_txn_dep", "created": 1552468692.8171153, "msecs": 817.115306854248, "relativeCreated": 1697417.4344539642, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:48:12"}, {"name": "test_rest_api_dep_txns", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1174, "funcName": "test_set_Max_txn_dep", "created": 1552468692.8176708, "msecs": 817.6708221435547, "relativeCreated": 1697417.9899692535, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:48:12"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the responses status", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1185, "funcName": "test_set_Max_txn_dep", "created": 1552468992.8331316, "msecs": 833.1315517425537, "relativeCreated": 1997433.4506988525, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:53:12"}], "longrepr": "self = <test_rest_api_dep_txns.TestPostTansactionDependencies object at 0x7f3e31d8dcc0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_set_Max_txn_dep(self, setup):\n        \"\"\"1. Create first Transaction for set with max value\n        2. Create second Transaction for increment with first Transaction as dependency\n        3. Create Batch\n        4. Call POST /batches\n        Verify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out\n        \"\"\"\n        LOGGER.info('Starting test for batch post')\n    \n        signer = get_signer()\n        expected_trxn_ids  = []\n        expected_batch_ids = []\n        address = _get_client_address()\n        url='{}/batches'.format(address)\n        tasks=[]\n        words = random_word_list(200)\n        name=random.choice(words)\n    \n        LOGGER.info(\"Creating intkey transactions with set operations\")\n    \n        txns = [\n            create_intkey_transaction_dep(\"set\", [] , name, 8888888888888888888888888, signer),]\n        for txn in txns:\n            data = MessageToDict(\n                    txn,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            trxn_id = data['header_signature']\n            expected_trxn_ids.append(trxn_id)\n    \n        LOGGER.info(\"Creating invalid intkey transactions with inc operations with dependent transactions as first transaction\")\n        trxn_ids = expected_trxn_ids\n        txns.append(create_intkey_transaction_dep(\"inc\", trxn_ids , name, 2, signer))\n        for txn in txns:\n            data = MessageToDict(\n                    txn,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            trxn_id = data['header_signature']\n            expected_trxn_ids.append(trxn_id)\n    \n        LOGGER.info(\"Creating batches for transactions 1trn/batch\")\n    \n        batches = [create_batch([txn], signer) for txn in txns]\n    \n        for batch in batches:\n            data = MessageToDict(\n                    batch,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            batch_id = data['header_signature']\n            expected_batch_ids.append(batch_id)\n    \n        post_batch_list = [BatchList(batches=[batch]).SerializeToString() for batch in batches]\n    \n        LOGGER.info(\"Submitting batches to the handlers\")\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                for batch in post_batch_list:\n                    task = asyncio.ensure_future(async_post_batch(url,session,data=batch))\n                    tasks.append(task)\n                responses = await asyncio.gather(*tasks)\n        except aiohttp.client_exceptions.ClientResponseError as error:\n            LOGGER.info(\"Rest Api is Unreachable\")\n    \n        LOGGER.info(\"Verifying the responses status\")\n    \n>       assert 'INVALID' == responses[0]['data'][0]['status']\nE       KeyError: 'data'\n\ndep_txns/test_rest_api_dep_txns.py:1187: KeyError"}, "teardown": {"duration": 0.00029158592224121094, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_invalid_set_txn_dep", "lineno": 1195, "outcome": "failed", "keywords": ["sixth", "run", "test_invalid_set_txn_dep", "()", "TestPostTansactionDependencies", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0005662441253662109, "outcome": "passed"}, "call": {"duration": 300.02927136421204, "outcome": "failed", "crash": {"path": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "lineno": 1267, "message": "KeyError: 'data'"}, "traceback": [{"path": "dep_txns/test_rest_api_dep_txns.py", "lineno": 1267, "message": "KeyError"}], "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1203, "funcName": "test_invalid_set_txn_dep", "created": 1552468992.8618283, "msecs": 861.8283271789551, "relativeCreated": 1997462.147474289, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:53:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1214, "funcName": "test_invalid_set_txn_dep", "created": 1552468992.8726635, "msecs": 872.6634979248047, "relativeCreated": 1997472.9826450348, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:53:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating invalid intkey transactions with inc operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1227, "funcName": "test_invalid_set_txn_dep", "created": 1552468992.8733828, "msecs": 873.3828067779541, "relativeCreated": 1997473.701953888, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:53:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1239, "funcName": "test_invalid_set_txn_dep", "created": 1552468992.8736565, "msecs": 873.6565113067627, "relativeCreated": 1997473.9756584167, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:53:12"}, {"name": "test_rest_api_dep_txns", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1254, "funcName": "test_invalid_set_txn_dep", "created": 1552468992.8741944, "msecs": 874.1943836212158, "relativeCreated": 1997474.5135307312, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:53:12"}, {"name": "test_rest_api_dep_txns", "msg": "Verifying the responses status", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1265, "funcName": "test_invalid_set_txn_dep", "created": 1552469292.8903093, "msecs": 890.3093338012695, "relativeCreated": 2297490.6284809113, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:12"}], "longrepr": "self = <test_rest_api_dep_txns.TestPostTansactionDependencies object at 0x7f3e31e34eb8>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_invalid_set_txn_dep(self, setup):\n        \"\"\"1. Create first invalid Transaction for set with negative value\n        2. Create second Transaction for increment with first invalid Transaction as dependency\n        3. Create Batch\n        4. Call POST /batches\n        Verify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out\n        \"\"\"\n        LOGGER.info('Starting test for batch post')\n    \n        signer = get_signer()\n        expected_trxn_ids  = []\n        expected_batch_ids = []\n        address = _get_client_address()\n        url='{}/batches'.format(address)\n        tasks=[]\n        words = random_word_list(200)\n        name=random.choice(words)\n    \n        LOGGER.info(\"Creating intkey transactions with set operations\")\n    \n        txns = [\n            create_intkey_transaction_dep(\"set\", [] , name, -1, signer),]\n        for txn in txns:\n            data = MessageToDict(\n                    txn,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            trxn_id = data['header_signature']\n            expected_trxn_ids.append(trxn_id)\n    \n        LOGGER.info(\"Creating invalid intkey transactions with inc operations with dependent transactions as first transaction\")\n        trxn_ids = expected_trxn_ids\n        txns.append(create_intkey_transaction_dep(\"inc\", trxn_ids , name, 2, signer))\n        for txn in txns:\n            data = MessageToDict(\n                    txn,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            trxn_id = data['header_signature']\n            expected_trxn_ids.append(trxn_id)\n    \n        LOGGER.info(\"Creating batches for transactions 1trn/batch\")\n    \n        batches = [create_batch([txn], signer) for txn in txns]\n    \n        for batch in batches:\n            data = MessageToDict(\n                    batch,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            batch_id = data['header_signature']\n            expected_batch_ids.append(batch_id)\n    \n        post_batch_list = [BatchList(batches=[batch]).SerializeToString() for batch in batches]\n    \n        LOGGER.info(\"Submitting batches to the handlers\")\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                for batch in post_batch_list:\n                    task = asyncio.ensure_future(async_post_batch(url,session,data=batch))\n                    tasks.append(task)\n                responses = await asyncio.gather(*tasks)\n        except aiohttp.client_exceptions.ClientResponseError as error:\n            LOGGER.info(\"Rest Api is Unreachable\")\n    \n        LOGGER.info(\"Verifying the responses status\")\n    \n>       assert 'INVALID' == responses[0]['data'][0]['status']\nE       KeyError: 'data'\n\ndep_txns/test_rest_api_dep_txns.py:1267: KeyError"}, "teardown": {"duration": 0.0002942085266113281, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_invalid_Address_txn_dep", "lineno": 1274, "outcome": "failed", "keywords": ["sixth", "run", "()", "TestPostTansactionDependencies", "dependent", "api_test", "test_invalid_Address_txn_dep", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0005810260772705078, "outcome": "passed"}, "call": {"duration": 0.012691259384155273, "outcome": "failed", "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1284, "funcName": "test_invalid_Address_txn_dep", "created": 1552469292.918577, "msecs": 918.5769557952881, "relativeCreated": 2297518.8961029053, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1295, "funcName": "test_invalid_Address_txn_dep", "created": 1552469292.929566, "msecs": 929.5659065246582, "relativeCreated": 2297529.8850536346, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating invalid intkey transactions with inc operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1308, "funcName": "test_invalid_Address_txn_dep", "created": 1552469292.9302814, "msecs": 930.281400680542, "relativeCreated": 2297530.6005477905, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1320, "funcName": "test_invalid_Address_txn_dep", "created": 1552469292.9305527, "msecs": 930.5527210235596, "relativeCreated": 2297530.8718681335, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:12"}], "longrepr": "Fixture \"post_batch_txn\" called directly. Fixtures are not meant to be called directly,\nbut are created automatically when test functions request them as parameters.\nSee https://docs.pytest.org/en/latest/fixture.html for more information about fixtures, and\nhttps://docs.pytest.org/en/latest/deprecations.html#calling-fixtures-directly about how to update your code."}, "teardown": {"duration": 0.0002970695495605469, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_Multiple_Indep_Txn_txn_dep", "lineno": 1377, "outcome": "failed", "keywords": ["test_Multiple_Indep_Txn_txn_dep", "sixth", "run", "()", "TestPostTansactionDependencies", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0006103515625, "outcome": "passed"}, "call": {"duration": 0.051718950271606445, "outcome": "failed", "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1387, "funcName": "test_Multiple_Indep_Txn_txn_dep", "created": 1552469292.9335861, "msecs": 933.5861206054688, "relativeCreated": 2297533.9052677155, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1403, "funcName": "test_Multiple_Indep_Txn_txn_dep", "created": 1552469292.9443717, "msecs": 944.3717002868652, "relativeCreated": 2297544.690847397, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating invalid intkey transactions with inc operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1433, "funcName": "test_Multiple_Indep_Txn_txn_dep", "created": 1552469292.984238, "msecs": 984.2379093170166, "relativeCreated": 2297584.557056427, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:12"}], "longrepr": "Fixture \"post_batch_txn\" called directly. Fixtures are not meant to be called directly,\nbut are created automatically when test functions request them as parameters.\nSee https://docs.pytest.org/en/latest/fixture.html for more information about fixtures, and\nhttps://docs.pytest.org/en/latest/deprecations.html#calling-fixtures-directly about how to update your code."}, "teardown": {"duration": 0.0003120899200439453, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_inc_first_txn_dep", "lineno": 1484, "outcome": "failed", "keywords": ["sixth", "run", "()", "TestPostTansactionDependencies", "test_inc_first_txn_dep", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0006172657012939453, "outcome": "passed"}, "call": {"duration": 0.012269973754882812, "outcome": "failed", "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1492, "funcName": "test_inc_first_txn_dep", "created": 1552469292.987501, "msecs": 987.5009059906006, "relativeCreated": 2297587.8200531006, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with inc operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1504, "funcName": "test_inc_first_txn_dep", "created": 1552469292.9982855, "msecs": 998.2855319976807, "relativeCreated": 2297598.6046791077, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:12"}, {"name": "test_rest_api_dep_txns", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1518, "funcName": "test_inc_first_txn_dep", "created": 1552469292.998971, "msecs": 998.9709854125977, "relativeCreated": 2297599.2901325226, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:12"}], "longrepr": "Fixture \"post_batch_txn\" called directly. Fixtures are not meant to be called directly,\nbut are created automatically when test functions request them as parameters.\nSee https://docs.pytest.org/en/latest/fixture.html for more information about fixtures, and\nhttps://docs.pytest.org/en/latest/deprecations.html#calling-fixtures-directly about how to update your code."}, "teardown": {"duration": 0.0007143020629882812, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_Multiple_dep_Txn_Consecutive_dep", "lineno": 1575, "outcome": "failed", "keywords": ["sixth", "run", "test_Multiple_dep_Txn_Consecutive_dep", "()", "TestPostTansactionDependencies", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0006165504455566406, "outcome": "passed"}, "call": {"duration": 0.012934684753417969, "outcome": "failed", "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1583, "funcName": "test_Multiple_dep_Txn_Consecutive_dep", "created": 1552469293.0023522, "msecs": 2.3522377014160156, "relativeCreated": 2297602.6713848114, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1595, "funcName": "test_Multiple_dep_Txn_Consecutive_dep", "created": 1552469293.0131235, "msecs": 13.123512268066406, "relativeCreated": 2297613.442659378, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1609, "funcName": "test_Multiple_dep_Txn_Consecutive_dep", "created": 1552469293.0138474, "msecs": 13.84735107421875, "relativeCreated": 2297614.166498184, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}], "longrepr": "Fixture \"post_batch_txn\" called directly. Fixtures are not meant to be called directly,\nbut are created automatically when test functions request them as parameters.\nSee https://docs.pytest.org/en/latest/fixture.html for more information about fixtures, and\nhttps://docs.pytest.org/en/latest/deprecations.html#calling-fixtures-directly about how to update your code."}, "teardown": {"duration": 0.0003056526184082031, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_Multiple_invalid_dep_Txn_Consecutive_dep", "lineno": 1678, "outcome": "failed", "keywords": ["sixth", "run", "()", "TestPostTansactionDependencies", "test_Multiple_invalid_dep_Txn_Consecutive_dep", "dependent", "api_test", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.00061798095703125, "outcome": "passed"}, "call": {"duration": 0.012976408004760742, "outcome": "failed", "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1687, "funcName": "test_Multiple_invalid_dep_Txn_Consecutive_dep", "created": 1552469293.0176005, "msecs": 17.600536346435547, "relativeCreated": 2297617.9196834564, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1699, "funcName": "test_Multiple_invalid_dep_Txn_Consecutive_dep", "created": 1552469293.0283308, "msecs": 28.33080291748047, "relativeCreated": 2297628.6499500275, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations with dependent transactions as first transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1713, "funcName": "test_Multiple_invalid_dep_Txn_Consecutive_dep", "created": 1552469293.0290146, "msecs": 29.01458740234375, "relativeCreated": 2297629.3337345123, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}], "longrepr": "Fixture \"post_batch_txn\" called directly. Fixtures are not meant to be called directly,\nbut are created automatically when test functions request them as parameters.\nSee https://docs.pytest.org/en/latest/fixture.html for more information about fixtures, and\nhttps://docs.pytest.org/en/latest/deprecations.html#calling-fixtures-directly about how to update your code."}, "teardown": {"duration": 0.00030541419982910156, "outcome": "passed"}}, {"nodeid": "dep_txns/test_rest_api_dep_txns.py::TestPostTansactionDependencies::test_separate_batch_txn_dep", "lineno": 1782, "outcome": "failed", "keywords": ["sixth", "run", "()", "TestPostTansactionDependencies", "dependent", "api_test", "test_separate_batch_txn_dep", "dep_txns/test_rest_api_dep_txns.py"], "metadata": {"0": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "1": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies                                                             \n3. Create third Transaction for decrement with first and second Transaction as dependecies                                                            \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "2": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "3": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single dependecies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "4": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment with first Transaction as dependecies\n3. Create third Transaction for increment with first and second Transaction as dependecies                                                                                                                \n4. Create Batch                                                                                                                                   \n5. Call POST /batches\nVerify the transactions", "5": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with single and same  dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "6": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for decrement with invalid Transaction as dependencies                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "7": "\"1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second Transaction for increment reverse dependency                           \n3. Create Batch                                                                                                                                   \n4. Call POST /batches \"\nVerify the transactions", "8": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies                                                                                                          \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This should be an invalid transaction. The third txn will be in PENDING state", "9": "1. Create first Transaction for set                                                                                                                                                                                                                      \n2. Create second invalid Transaction for increment with first Transaction as dependecies with different key                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. This shoud be an invalid transaction. The trird txn will be in PENDING state", "10": "1. Create first Transaction for set with max value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "11": "1. Create first invalid Transaction for set with negative value                                                                                                                                                                                                                   \n2. Create second Transaction for increment with first invalid Transaction as dependency                                                                                                      \n3. Create Batch                                                                                                                                   \n4. Call POST /batches\nVerify the transactions. The first one shoud be an invalid transaction. The second txn will be with error code 17 and Validator Timed Out", "12": "1. Create first Transaction for set                                                                                                                                                                                                                   \n2. Create second dependent Transaction for increment and make the address invalid with first Transaction as dependency     \n3. Create batch ,post batch and check the response status\n4. The second transaction will be an invalid transaction\n5. Create the third transaction for decrement with first and second as dependency \n6. Create a batch and post batch\nVerify the transaction responses. The first one will be COMMITTED and second one shoud be an invalid transaction. The third txn will be with error code 17 and Validator Timed Out", "13": "1.Create 5 independent Transactions for set\n2.Create second dependent transaction for set with 5 independent transactions as dependency\n3.Create third dependent Transaction for increment with second dependent Transaction as dependency     \n4.Create a batch for all the dependent transaction and post batch\n5.Check for the status\n6.Now create the batch for independent transactions and post batch\n7. Check for the response status of both independent and dependent transactions", "14": "1.Create a dependent transactions for increment\n2.Create a dependent transaction for set for the same key with first transaction as dependent                                                                                                                                                \n3.Create batch and post the first transaction(increment) first and check the response status\n4.Post the second transaction(set)  and check the response status", "15": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, fourth is depend on third and fifth is depend on fourth\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be COMMITTED.", "16": "1.Create 5 dependent transactions for set and second one is depend on first, third is depend on second, \nfourth is depend on third and fifth is depend on fourth. Fourth one will be an invalid txn\n2. Create a batch and post the fourth and fifth transactions.\n3. Check the response status. It should not be COMMITTED.\n4. Create batch and post first, second and third transactions and check the response status. It should be COMMITTED.\n5. Now check the response for the fourth and fifth transaction. It should be INVALID.", "17": "1.Create first batch having 3 transactions.\n2.Make third transaction invalid from first  batch.\n3.Create second batch having 2 transactions \n4.Make transaction from second batch dependent on transaction from first batch.\n5.post batch and check for the status.\n6.Create third batch having 2 transaction.\n7.Make transaction from third batch dependent on transaction from second batch.\n8.post batch and check for the status."}, "setup": {"duration": 0.0006117820739746094, "outcome": "passed"}, "call": {"duration": 0.012592315673828125, "outcome": "failed", "log": [{"name": "test_rest_api_dep_txns", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1794, "funcName": "test_separate_batch_txn_dep", "created": 1552469293.032737, "msecs": 32.737016677856445, "relativeCreated": 2297633.056163788, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}, {"name": "test_rest_api_dep_txns", "msg": "Creating intkey transactions with set operations for first batch having one invalid transaction", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1807, "funcName": "test_separate_batch_txn_dep", "created": 1552469293.0435276, "msecs": 43.52760314941406, "relativeCreated": 2297643.8467502594, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}, {"name": "test_rest_api_dep_txns", "msg": "Creating first batch to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/dep_txns/test_rest_api_dep_txns.py", "filename": "test_rest_api_dep_txns.py", "module": "test_rest_api_dep_txns", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 1824, "funcName": "test_separate_batch_txn_dep", "created": 1552469293.0445235, "msecs": 44.52347755432129, "relativeCreated": 2297644.8426246643, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}], "longrepr": "Fixture \"post_batch_txn\" called directly. Fixtures are not meant to be called directly,\nbut are created automatically when test functions request them as parameters.\nSee https://docs.pytest.org/en/latest/fixture.html for more information about fixtures, and\nhttps://docs.pytest.org/en/latest/deprecations.html#calling-fixtures-directly about how to update your code."}, "teardown": {"duration": 0.0003383159637451172, "outcome": "passed"}}, {"nodeid": "get/test_rest_api_get_peers.py::TestPeerList::test_api_get_peer_list", "lineno": 49, "outcome": "failed", "keywords": ["peers", "TestPeerList", "()", "get/test_rest_api_get_peers.py", "api_test", "get", "test_api_get_peer_list"], "metadata": {"0": "This class tests the peer list with different parameters\n        "}, "setup": {"duration": 0.0009057521820068359, "outcome": "passed"}, "call": {"duration": 0.0005850791931152344, "outcome": "failed", "crash": {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError: _request() got an unexpected keyword argument 'raise_for_status'"}, "traceback": [{"path": "get/test_rest_api_get_peers.py", "lineno": 59, "message": ""}, {"path": "/usr/lib/python3/dist-packages/aiohttp/client.py", "lineno": 653, "message": "TypeError"}], "longrepr": "self = <test_rest_api_get_peers.TestPeerList object at 0x7f3e31cf65c0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_api_get_peer_list(self, setup):\n    \n        \"\"\"This class tests the peer list with different parameters\n        \"\"\"\n        address = setup['address']\n        expected_link = '{}/peers'.format(address)\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n>               async with session.get(url='{}/peers'.format(address), raise_for_status=True) as data:\n\nget/test_rest_api_get_peers.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <aiohttp.client.ClientSession object at 0x7f3e31e32e80>, url = 'http://192.168.1.23:8008/peers', allow_redirects = True, kwargs = {'raise_for_status': True}\n\n    def get(self, url, *, allow_redirects=True, **kwargs):\n        \"\"\"Perform HTTP GET request.\"\"\"\n        return _RequestContextManager(\n            self._request(hdrs.METH_GET, url,\n                          allow_redirects=allow_redirects,\n>                         **kwargs))\nE       TypeError: _request() got an unexpected keyword argument 'raise_for_status'\n\n/usr/lib/python3/dist-packages/aiohttp/client.py:653: TypeError"}, "teardown": {"duration": 0.0002613067626953125, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_rest_api_post_batch", "lineno": 124, "outcome": "passed", "keywords": ["run", "test_rest_api_post_batch", "()", "last", "api_test", "post/test_rest_api_post.py", "TestPostList", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 0.0004646778106689453, "outcome": "passed"}, "call": {"duration": 1.2028882503509521, "outcome": "passed", "log": [{"name": "test_rest_api_post", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 130, "funcName": "test_rest_api_post_batch", "created": 1552469293.0603561, "msecs": 60.35614013671875, "relativeCreated": 2297660.6752872467, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}, {"name": "test_rest_api_post", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 139, "funcName": "test_rest_api_post_batch", "created": 1552469293.0631914, "msecs": 63.19141387939453, "relativeCreated": 2297663.5105609894, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}, {"name": "test_rest_api_post", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 153, "funcName": "test_rest_api_post_batch", "created": 1552469293.0720263, "msecs": 72.02625274658203, "relativeCreated": 2297672.3453998566, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}, {"name": "test_rest_api_post", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 168, "funcName": "test_rest_api_post_batch", "created": 1552469293.0724556, "msecs": 72.45564460754395, "relativeCreated": 2297672.7747917175, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}, {"name": "test_rest_api_post", "msg": "Batch is committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 186, "funcName": "test_rest_api_post_batch", "created": 1552469293.8851209, "msecs": 885.1208686828613, "relativeCreated": 2298485.440015793, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}, {"name": "test_rest_api_post", "msg": "Block is created for the respective batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 190, "funcName": "test_rest_api_post_batch", "created": 1552469293.8853865, "msecs": 885.3864669799805, "relativeCreated": 2298485.70561409, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:13"}, {"name": "utils", "msg": "Checking Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 241, "funcName": "check_for_consensus", "created": 1552469294.2348776, "msecs": 234.8775863647461, "relativeCreated": 2298835.1967334747, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:14"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552469294.2351928, "msecs": 235.19277572631836, "relativeCreated": 2298835.5119228363, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:14"}, {"name": "utils", "msg": "Validators in Consensus on block number 1", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/utils.py", "filename": "utils.py", "module": "utils", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 256, "funcName": "check_for_consensus", "created": 1552469294.235304, "msecs": 235.3041172027588, "relativeCreated": 2298835.6232643127, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:14"}]}, "teardown": {"duration": 0.00045108795166015625, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_rest_api_no_batches", "lineno": 206, "outcome": "passed", "keywords": ["run", "()", "last", "api_test", "post/test_rest_api_post.py", "test_rest_api_no_batches", "TestPostList", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 0.000766754150390625, "outcome": "passed"}, "call": {"duration": 0.023238658905029297, "outcome": "passed", "log": [{"name": "test_rest_api_post", "msg": "Starting test for batch with bad protobuf", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 210, "funcName": "test_rest_api_no_batches", "created": 1552469294.2659051, "msecs": 265.90514183044434, "relativeCreated": 2298866.2242889404, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:14"}]}, "teardown": {"duration": 0.00031876564025878906, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_rest_api_bad_protobuf", "lineno": 224, "outcome": "passed", "keywords": ["run", "test_rest_api_bad_protobuf", "()", "last", "api_test", "post/test_rest_api_post.py", "TestPostList", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 0.0004909038543701172, "outcome": "passed"}, "call": {"duration": 0.022320032119750977, "outcome": "passed", "log": [{"name": "test_rest_api_post", "msg": "Starting test for batch with bad protobuf", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 228, "funcName": "test_rest_api_bad_protobuf", "created": 1552469294.2907984, "msecs": 290.7984256744385, "relativeCreated": 2298891.1175727844, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:14"}]}, "teardown": {"duration": 0.0003139972686767578, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_rest_api_post_wrong_header", "lineno": 243, "outcome": "passed", "keywords": ["run", "()", "test_rest_api_post_wrong_header", "last", "api_test", "post/test_rest_api_post.py", "TestPostList", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 0.000518798828125, "outcome": "passed"}, "call": {"duration": 0.03165841102600098, "outcome": "passed", "log": [{"name": "test_rest_api_post", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 247, "funcName": "test_rest_api_post_wrong_header", "created": 1552469294.3149316, "msecs": 314.93163108825684, "relativeCreated": 2298915.2507781982, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:14"}, {"name": "test_rest_api_post", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 257, "funcName": "test_rest_api_post_wrong_header", "created": 1552469294.3176703, "msecs": 317.6703453063965, "relativeCreated": 2298917.9894924164, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:14"}, {"name": "test_rest_api_post", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 271, "funcName": "test_rest_api_post_wrong_header", "created": 1552469294.3268256, "msecs": 326.8256187438965, "relativeCreated": 2298927.144765854, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:14"}, {"name": "test_rest_api_post", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 286, "funcName": "test_rest_api_post_wrong_header", "created": 1552469294.327273, "msecs": 327.272891998291, "relativeCreated": 2298927.5920391083, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:14"}]}, "teardown": {"duration": 0.0002865791320800781, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_rest_api_post_same_txns", "lineno": 299, "outcome": "passed", "keywords": ["run", "()", "last", "api_test", "post/test_rest_api_post.py", "test_rest_api_post_same_txns", "TestPostList", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 0.0006237030029296875, "outcome": "passed"}, "call": {"duration": 300.04993200302124, "outcome": "passed", "log": [{"name": "test_rest_api_post", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 303, "funcName": "test_rest_api_post_same_txns", "created": 1552469294.3486063, "msecs": 348.6063480377197, "relativeCreated": 2298948.9254951477, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:14"}, {"name": "test_rest_api_post", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 312, "funcName": "test_rest_api_post_same_txns", "created": 1552469294.3633149, "msecs": 363.3148670196533, "relativeCreated": 2298963.6340141296, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:14"}, {"name": "test_rest_api_post", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 327, "funcName": "test_rest_api_post_same_txns", "created": 1552469294.36413, "msecs": 364.13002014160156, "relativeCreated": 2298964.4491672516, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:14"}, {"name": "test_rest_api_post", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 342, "funcName": "test_rest_api_post_same_txns", "created": 1552469294.3647022, "msecs": 364.7022247314453, "relativeCreated": 2298965.0213718414, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 14:58:14"}]}, "teardown": {"duration": 0.0003325939178466797, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_rest_api_multiple_txns_batches", "lineno": 353, "outcome": "failed", "keywords": ["run", "()", "last", "api_test", "post/test_rest_api_post.py", "test_rest_api_multiple_txns_batches", "TestPostList", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 0.0005643367767333984, "outcome": "passed"}, "call": {"duration": 300.31529569625854, "outcome": "failed", "crash": {"path": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "lineno": 414, "message": "KeyError: 'data'"}, "traceback": [{"path": "post/test_rest_api_post.py", "lineno": 414, "message": "KeyError"}], "log": [{"name": "test_rest_api_post", "msg": "Starting test for batch post", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 358, "funcName": "test_rest_api_multiple_txns_batches", "created": 1552469594.4003966, "msecs": 400.39658546447754, "relativeCreated": 2599000.7157325745, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:03:14"}, {"name": "test_rest_api_post", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 367, "funcName": "test_rest_api_multiple_txns_batches", "created": 1552469594.403408, "msecs": 403.4080505371094, "relativeCreated": 2599003.727197647, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:03:14"}, {"name": "test_rest_api_post", "msg": "Creating batches for transactions 1trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 382, "funcName": "test_rest_api_multiple_txns_batches", "created": 1552469594.42133, "msecs": 421.3299751281738, "relativeCreated": 2599021.649122238, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:03:14"}, {"name": "test_rest_api_post", "msg": "Submitting batches to the handlers", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 397, "funcName": "test_rest_api_multiple_txns_batches", "created": 1552469594.4219859, "msecs": 421.9858646392822, "relativeCreated": 2599022.3050117493, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:03:14"}, {"name": "test_rest_api_post", "msg": "Batch is committed", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 415, "funcName": "test_rest_api_multiple_txns_batches", "created": 1552469894.7145035, "msecs": 714.5035266876221, "relativeCreated": 2899314.8226737976, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:08:14"}, {"name": "test_rest_api_post", "msg": "Block is created for the respective batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 419, "funcName": "test_rest_api_multiple_txns_batches", "created": 1552469894.7147007, "msecs": 714.7006988525391, "relativeCreated": 2899315.0198459625, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:08:14"}], "longrepr": "self = <test_rest_api_post.TestPostList object at 0x7f3e31cf6da0>\nsetup = {'address': 'http://192.168.1.23:8008', 'batch_ids': ['b48ba2ab460ff4e4c240297f54bb14deb4ec4198d03f9dc0be5906a4e94c9b9...e6012a35ef2e8fbb4ea71fbcf6470db7915f42633742683685b38cff905&limit=100', 'paging': {'limit': None, 'start': None}}, ...}\n\n    async def test_rest_api_multiple_txns_batches(self, setup):\n        \"\"\"Tests rest-api state by submitting multiple\n            transactions in multiple batches\n        \"\"\"\n        LOGGER.info('Starting test for batch post')\n    \n        signer = get_signer()\n        expected_trxn_ids  = []\n        expected_batch_ids = []\n        address = _get_client_address()\n        url='{}/batches'.format(address)\n        tasks=[]\n    \n        LOGGER.info(\"Creating intkey transactions with set operations\")\n        txns = [\n            create_intkey_transaction(\"set\", [] , 50 , signer),\n            create_intkey_transaction(\"set\", [] , 50 , signer),\n        ]\n    \n        for txn in txns:\n            data = MessageToDict(\n                    txn,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            trxn_id = data['header_signature']\n            expected_trxn_ids.append(trxn_id)\n    \n        LOGGER.info(\"Creating batches for transactions 1trn/batch\")\n    \n        batches = [create_batch([txn], signer) for txn in txns]\n    \n        for batch in batches:\n            data = MessageToDict(\n                    batch,\n                    including_default_value_fields=True,\n                    preserving_proto_field_name=True)\n    \n            batch_id = data['header_signature']\n            expected_batch_ids.append(batch_id)\n    \n        post_batch_list = [BatchList(batches=[batch]).SerializeToString() for batch in batches]\n    \n        LOGGER.info(\"Submitting batches to the handlers\")\n    \n        try:\n            async with aiohttp.ClientSession() as session:\n                for batch in post_batch_list:\n                    task = asyncio.ensure_future(async_post_batch(url,session,data=batch))\n                    tasks.append(task)\n                responses = await asyncio.gather(*tasks)\n        except aiohttp.client_exceptions.ClientResponseError as error:\n            LOGGER.info(\"Rest Api is Unreachable\")\n    \n        block_batch_ids = [block['header']['batch_ids'][0] for block in get_blocks()['data']]\n        state_addresses = [state['address'] for state in get_state_list()['data']]\n        state_head_list = [get_state_address(address)['head'] for address in state_addresses]\n        committed_transaction_list = get_transactions()['data']\n    \n        for response in responses:\n>           if response['data'][0]['status'] == 'COMMITTED':\nE           KeyError: 'data'\n\npost/test_rest_api_post.py:414: KeyError"}, "teardown": {"duration": 0.00031876564025878906, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_api_post_empty_trxns_list", "lineno": 436, "outcome": "passed", "keywords": ["run", "test_api_post_empty_trxns_list", "()", "last", "api_test", "post/test_rest_api_post.py", "TestPostList", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 0.0009093284606933594, "outcome": "passed"}, "call": {"duration": 0.2988104820251465, "outcome": "passed"}, "teardown": {"duration": 0.00038886070251464844, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_api_post_batch_different_signer", "lineno": 456, "outcome": "passed", "keywords": ["run", "()", "test_api_post_batch_different_signer", "last", "api_test", "post/test_rest_api_post.py", "TestPostList", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 0.0007269382476806641, "outcome": "passed"}, "call": {"duration": 0.034769535064697266, "outcome": "passed"}, "teardown": {"duration": 0.0002663135528564453, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostList::test_rest_api_post_no_endpoint", "lineno": 481, "outcome": "passed", "keywords": ["test_rest_api_post_no_endpoint", "run", "()", "last", "api_test", "post/test_rest_api_post.py", "TestPostList", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 0.0005075931549072266, "outcome": "passed"}, "call": {"duration": 0.029005050659179688, "outcome": "passed", "log": [{"name": "test_rest_api_post", "msg": "Rest Api is Unreachable", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 501, "funcName": "test_rest_api_post_no_endpoint", "created": 1552469895.0790472, "msecs": 79.04720306396484, "relativeCreated": 2899679.366350174, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:08:15"}, {"name": "test_rest_api_post", "msg": "Url is not correct", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "filename": "test_rest_api_post.py", "module": "test_rest_api_post", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 502, "funcName": "test_rest_api_post_no_endpoint", "created": 1552469895.079215, "msecs": 79.21504974365234, "relativeCreated": 2899679.5341968536, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:08:15"}]}, "teardown": {"duration": 0.0002880096435546875, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_invalid_addr", "lineno": 505, "outcome": "failed", "keywords": ["run", "()", "last", "api_test", "post/test_rest_api_post.py", "TestPostInvalidTxns", "test_txn_invalid_addr", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 300.08463168144226, "outcome": "passed", "log": [{"name": "payload", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 363, "funcName": "get_txns_commit_data", "created": 1552469895.1484358, "msecs": 148.4358310699463, "relativeCreated": 2899748.75497818, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:08:15"}, {"name": "payload", "msg": "Creating batches for transactions 3trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 381, "funcName": "get_txns_commit_data", "created": 1552469895.1487534, "msecs": 148.75340461730957, "relativeCreated": 2899749.0725517273, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:08:15"}]}, "call": {"duration": 0.0007100105285644531, "outcome": "failed", "crash": {"path": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "lineno": 516, "message": "AssertionError: assert 'PENDING' == 'INVALID'\n  - PENDING\n  + INVALID"}, "traceback": [{"path": "post/test_rest_api_post.py", "lineno": 516, "message": "AssertionError"}], "longrepr": "self = <test_rest_api_post.TestPostInvalidTxns object at 0x7f3e31c8ea20>\nsetup_invalid_txns = {'expected_batch_length': 28, 'expected_trn_length': 36, 'expected_trxn_ids': ['616de1ae6c4d0c3873a11cae4164ce2bde32d5...02bd992262bc92b61ce72f82a215474cbe5f22d27a3a0ba32ee1f6b496aba2c418b3fb7ea145f833bf86f126820fc36674d0f442dc4746d'], ...}\n\n    def test_txn_invalid_addr(self, setup_invalid_txns):\n        \"\"\"Tests rest-api state by submitting invalid\n            transactions with invalid address\n        \"\"\"\n        initial_batch_length = setup_invalid_txns['initial_batch_length']\n        expected_batch_length = setup_invalid_txns['expected_batch_length']\n        initial_trn_length = setup_invalid_txns['initial_trn_length']\n        expected_trn_length = setup_invalid_txns['expected_trn_length']\n        assert initial_batch_length < expected_batch_length\n        assert initial_trn_length < expected_trn_length\n>       assert setup_invalid_txns['response'] == 'INVALID'\nE       AssertionError: assert 'PENDING' == 'INVALID'\nE         - PENDING\nE         + INVALID\n\npost/test_rest_api_post.py:516: AssertionError"}, "teardown": {"duration": 0.0003712177276611328, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_invalid_min", "lineno": 517, "outcome": "failed", "keywords": ["run", "()", "test_txn_invalid_min", "last", "api_test", "post/test_rest_api_post.py", "TestPostInvalidTxns", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 0.07364130020141602, "outcome": "passed", "log": [{"name": "payload", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 363, "funcName": "get_txns_commit_data", "created": 1552470195.2496896, "msecs": 249.68957901000977, "relativeCreated": 3199850.00872612, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:13:15"}, {"name": "payload", "msg": "Creating batches for transactions 3trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 381, "funcName": "get_txns_commit_data", "created": 1552470195.250011, "msecs": 250.01096725463867, "relativeCreated": 3199850.3301143646, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:13:15"}, {"name": "payload", "msg": "Rest Api is not reachable", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 405, "funcName": "get_txns_commit_data", "created": 1552470195.2579696, "msecs": 257.96961784362793, "relativeCreated": 3199858.2887649536, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:13:15"}, {"name": "payload", "msg": "Submitted Batches Invalid", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 407, "funcName": "get_txns_commit_data", "created": 1552470195.2582128, "msecs": 258.2128047943115, "relativeCreated": 3199858.5319519043, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:13:15"}, {"name": "payload", "msg": "The submitted BatchList was rejected by the validator. It was poorly formed, or has an invalid signature.", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 408, "funcName": "get_txns_commit_data", "created": 1552470195.2582664, "msecs": 258.2664489746094, "relativeCreated": 3199858.5855960846, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:13:15"}, {"name": "payload", "msg": "30", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 409, "funcName": "get_txns_commit_data", "created": 1552470195.2583063, "msecs": 258.30626487731934, "relativeCreated": 3199858.6254119873, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:13:15"}]}, "call": {"duration": 0.00023865699768066406, "outcome": "failed", "crash": {"path": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "lineno": 528, "message": "KeyError: 'response'"}, "traceback": [{"path": "post/test_rest_api_post.py", "lineno": 528, "message": "KeyError"}], "longrepr": "self = <test_rest_api_post.TestPostInvalidTxns object at 0x7f3e31dd8a58>\nsetup_invalid_txns_min = {'code': 30, 'expected_batch_length': 28, 'expected_trn_length': 36, 'expected_trxn_ids': ['57db4645425de94de1374c8e2a...1374c8e2ad5e59cd8e119d4f30d6216e51578c625624d1365e5284bd350c5cda4c0971ced6ccbf425c8c6aa70892ed041b9fd36bd5d62b4'], ...}\n\n    def test_txn_invalid_min(self, setup_invalid_txns_min):\n        \"\"\"Tests rest-api state by submitting invalid\n            transactions with minimum address length\n        \"\"\"\n        initial_batch_length = setup_invalid_txns_min['initial_batch_length']\n        expected_batch_length = setup_invalid_txns_min['expected_batch_length']\n        initial_trn_length = setup_invalid_txns_min['initial_trn_length']\n        expected_trn_length = setup_invalid_txns_min['expected_trn_length']\n        assert initial_batch_length < expected_batch_length\n        assert initial_trn_length < expected_trn_length\n>       assert setup_invalid_txns_min['response'] == 'INVALID'\nE       KeyError: 'response'\n\npost/test_rest_api_post.py:528: KeyError"}, "teardown": {"duration": 0.0003113746643066406, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_invalid_max", "lineno": 529, "outcome": "failed", "keywords": ["test_txn_invalid_max", "run", "()", "last", "api_test", "post/test_rest_api_post.py", "TestPostInvalidTxns", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 300.0988953113556, "outcome": "passed", "log": [{"name": "payload", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 363, "funcName": "get_txns_commit_data", "created": 1552470195.3326325, "msecs": 332.63254165649414, "relativeCreated": 3199932.9516887665, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:13:15"}, {"name": "payload", "msg": "Creating batches for transactions 3trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 381, "funcName": "get_txns_commit_data", "created": 1552470195.3329499, "msecs": 332.9498767852783, "relativeCreated": 3199933.2690238953, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:13:15"}]}, "call": {"duration": 0.0012984275817871094, "outcome": "failed", "crash": {"path": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "lineno": 540, "message": "AssertionError: assert 'PENDING' == 'INVALID'\n  - PENDING\n  + INVALID"}, "traceback": [{"path": "post/test_rest_api_post.py", "lineno": 540, "message": "AssertionError"}], "longrepr": "self = <test_rest_api_post.TestPostInvalidTxns object at 0x7f3e31ea4400>\nsetup_invalid_txns_max = {'expected_batch_length': 28, 'expected_trn_length': 36, 'expected_trxn_ids': ['eeda5d7c683e6c0438e45339b8e49b30765d75...3053031e06929d90296af7ec09c4e8fdb568d0b21900fd347e5264ae633c4753f14450988c0c34cf6b53976ba3e20ac8c99c65ab8ecea51'], ...}\n\n    def test_txn_invalid_max(self, setup_invalid_txns_max):\n        \"\"\"Tests rest-api state by submitting invalid\n            transactions with maximum address length\n        \"\"\"\n        initial_batch_length = setup_invalid_txns_max['initial_batch_length']\n        expected_batch_length = setup_invalid_txns_max['expected_batch_length']\n        initial_trn_length = setup_invalid_txns_max['initial_trn_length']\n        expected_trn_length = setup_invalid_txns_max['expected_trn_length']\n        assert initial_batch_length < expected_batch_length\n        assert initial_trn_length < expected_trn_length\n>       assert setup_invalid_txns_max['response'] == 'INVALID'\nE       AssertionError: assert 'PENDING' == 'INVALID'\nE         - PENDING\nE         + INVALID\n\npost/test_rest_api_post.py:540: AssertionError"}, "teardown": {"duration": 0.0003604888916015625, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_valid_invalid_txns", "lineno": 541, "outcome": "failed", "keywords": ["run", "test_txn_valid_invalid_txns", "()", "last", "api_test", "post/test_rest_api_post.py", "TestPostInvalidTxns", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 300.0920162200928, "outcome": "passed", "log": [{"name": "payload", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 363, "funcName": "get_txns_commit_data", "created": 1552470495.4548213, "msecs": 454.8213481903076, "relativeCreated": 3500055.1404953003, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:18:15"}, {"name": "payload", "msg": "Creating batches for transactions 3trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 381, "funcName": "get_txns_commit_data", "created": 1552470495.4551435, "msecs": 455.1434516906738, "relativeCreated": 3500055.4625988007, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:18:15"}]}, "call": {"duration": 0.0005271434783935547, "outcome": "failed", "crash": {"path": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "lineno": 552, "message": "AssertionError: assert 'PENDING' == 'INVALID'\n  - PENDING\n  + INVALID"}, "traceback": [{"path": "post/test_rest_api_post.py", "lineno": 552, "message": "AssertionError"}], "longrepr": "self = <test_rest_api_post.TestPostInvalidTxns object at 0x7f3e31e45550>\nsetup_valinv_txns = {'expected_batch_length': 28, 'expected_trn_length': 36, 'expected_trxn_ids': ['ef4f1bc8e036f9118c4e460db75c6cdfc0c952...aea5f7109730d7840ff49d608ad1df1c87b125dc9f3e77d383bb525d36d172857fb02306764cd5b916a841dce373bd23f8fee93f3bbf6c8'], ...}\n\n    def test_txn_valid_invalid_txns(self, setup_valinv_txns):\n        \"\"\"Tests rest-api state by submitting valid\n            transactions with invalid transactions\n        \"\"\"\n        initial_batch_length = setup_valinv_txns['initial_batch_length']\n        expected_batch_length = setup_valinv_txns['expected_batch_length']\n        initial_trn_length = setup_valinv_txns['initial_trn_length']\n        expected_trn_length = setup_valinv_txns['expected_trn_length']\n        assert initial_batch_length < expected_batch_length\n        assert initial_trn_length < expected_trn_length\n>       assert setup_valinv_txns['response'] == 'INVALID'\nE       AssertionError: assert 'PENDING' == 'INVALID'\nE         - PENDING\nE         + INVALID\n\npost/test_rest_api_post.py:552: AssertionError"}, "teardown": {"duration": 0.0002913475036621094, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_invalid_valid_txns", "lineno": 553, "outcome": "failed", "keywords": ["test_txn_invalid_valid_txns", "run", "()", "last", "api_test", "post/test_rest_api_post.py", "TestPostInvalidTxns", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 300.08489084243774, "outcome": "passed", "log": [{"name": "payload", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 363, "funcName": "get_txns_commit_data", "created": 1552470795.556109, "msecs": 556.1089515686035, "relativeCreated": 3800156.4280986786, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:23:15"}, {"name": "payload", "msg": "Creating batches for transactions 3trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 381, "funcName": "get_txns_commit_data", "created": 1552470795.556431, "msecs": 556.4310550689697, "relativeCreated": 3800156.750202179, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:23:15"}]}, "call": {"duration": 0.00067138671875, "outcome": "failed", "crash": {"path": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/post/test_rest_api_post.py", "lineno": 564, "message": "AssertionError: assert 'PENDING' == 'INVALID'\n  - PENDING\n  + INVALID"}, "traceback": [{"path": "post/test_rest_api_post.py", "lineno": 564, "message": "AssertionError"}], "longrepr": "self = <test_rest_api_post.TestPostInvalidTxns object at 0x7f3e31c99358>\nsetup_invval_txns = {'expected_batch_length': 28, 'expected_trn_length': 36, 'expected_trxn_ids': ['a4e6005b48a89217aaa84223cee06a235ff40b...224b4fe899919fad88f9f850c2a0b19da17ed6a306de1043f4b3aeb1a37560b2a00aef244aa9e28d56321f20ed41538806e2ad2228b4be6'], ...}\n\n    def test_txn_invalid_valid_txns(self, setup_invval_txns):\n        \"\"\"Tests rest-api state by submitting invalid\n            transactions with valid transactions\n        \"\"\"\n        initial_batch_length = setup_invval_txns['initial_batch_length']\n        expected_batch_length = setup_invval_txns['expected_batch_length']\n        initial_trn_length = setup_invval_txns['initial_trn_length']\n        expected_trn_length = setup_invval_txns['expected_trn_length']\n        assert initial_batch_length < expected_batch_length\n        assert initial_trn_length < expected_trn_length\n>       assert setup_invval_txns['response'] == 'INVALID'\nE       AssertionError: assert 'PENDING' == 'INVALID'\nE         - PENDING\nE         + INVALID\n\npost/test_rest_api_post.py:564: AssertionError"}, "teardown": {"duration": 0.0003440380096435547, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_same_txns", "lineno": 565, "outcome": "passed", "keywords": ["run", "()", "last", "api_test", "post/test_rest_api_post.py", "test_txn_same_txns", "TestPostInvalidTxns", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 0.05125737190246582, "outcome": "passed", "log": [{"name": "payload", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 363, "funcName": "get_txns_commit_data", "created": 1552471095.6346703, "msecs": 634.6702575683594, "relativeCreated": 4100234.9894046783, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:28:15"}, {"name": "payload", "msg": "Creating batches for transactions 3trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 381, "funcName": "get_txns_commit_data", "created": 1552471095.6349797, "msecs": 634.9797248840332, "relativeCreated": 4100235.298871994, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:28:15"}, {"name": "payload", "msg": "Rest Api is not reachable", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 405, "funcName": "get_txns_commit_data", "created": 1552471095.6429555, "msecs": 642.9555416107178, "relativeCreated": 4100243.2746887207, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:28:15"}, {"name": "payload", "msg": "Submitted Batches Invalid", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 407, "funcName": "get_txns_commit_data", "created": 1552471095.643195, "msecs": 643.1949138641357, "relativeCreated": 4100243.514060974, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:28:15"}, {"name": "payload", "msg": "The submitted BatchList was rejected by the validator. It was poorly formed, or has an invalid signature.", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 408, "funcName": "get_txns_commit_data", "created": 1552471095.6432474, "msecs": 643.2473659515381, "relativeCreated": 4100243.5665130615, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:28:15"}, {"name": "payload", "msg": "30", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 409, "funcName": "get_txns_commit_data", "created": 1552471095.643289, "msecs": 643.2890892028809, "relativeCreated": 4100243.608236313, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:28:15"}]}, "call": {"duration": 0.00022792816162109375, "outcome": "passed"}, "teardown": {"duration": 0.00025582313537597656, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_api_sent_commit_txns", "lineno": 577, "outcome": "passed", "keywords": ["run", "()", "test_api_sent_commit_txns", "last", "api_test", "post/test_rest_api_post.py", "TestPostInvalidTxns", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 0.31499171257019043, "outcome": "passed", "log": [{"name": "payload", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 363, "funcName": "get_txns_commit_data", "created": 1552471095.7083194, "msecs": 708.3194255828857, "relativeCreated": 4100308.638572693, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:28:15"}, {"name": "payload", "msg": "Creating batches for transactions 3trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 381, "funcName": "get_txns_commit_data", "created": 1552471095.7086265, "msecs": 708.6265087127686, "relativeCreated": 4100308.9456558228, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:28:15"}]}, "call": {"duration": 0.013001441955566406, "outcome": "passed"}, "teardown": {"duration": 0.0007901191711425781, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_invalid_bad_addr", "lineno": 595, "outcome": "passed", "keywords": ["run", "()", "last", "api_test", "post/test_rest_api_post.py", "TestPostInvalidTxns", "test_txn_invalid_bad_addr", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 300.0979595184326, "outcome": "passed", "log": [{"name": "payload", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 363, "funcName": "get_txns_commit_data", "created": 1552471096.051, "msecs": 51.000118255615234, "relativeCreated": 4100651.3192653656, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:28:16"}, {"name": "payload", "msg": "Creating batches for transactions 3trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 381, "funcName": "get_txns_commit_data", "created": 1552471096.0513065, "msecs": 51.30648612976074, "relativeCreated": 4100651.6256332397, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:28:16"}]}, "call": {"duration": 0.0003902912139892578, "outcome": "passed"}, "teardown": {"duration": 0.0004792213439941406, "outcome": "passed"}}, {"nodeid": "post/test_rest_api_post.py::TestPostInvalidTxns::test_txn_invalid_family_name", "lineno": 606, "outcome": "passed", "keywords": ["run", "()", "test_txn_invalid_family_name", "last", "api_test", "post/test_rest_api_post.py", "TestPostInvalidTxns", "post"], "metadata": {"0": "Tests that transactions are submitted and committed for\neach block that are created by submitting intkey batches\nwith set operations", "1": "\"Tests rest api by posting no batches\n        ", "2": "Tests rest api by posting with bad protobuf\n        ", "3": "Tests rest api by posting with wrong header\n        ", "4": "Tests the rest-api by submitting multiple transactions with same key\n        ", "5": "Tests rest-api state by submitting multiple\ntransactions in multiple batches", "6": "Tests rest-api state by submitting\ntransactions in empty transaction list", "7": "Tests rest-api state by submitting \ntransactions with different signer ", "8": "Tests rest-api state by submitting\ntransactions with no endpoint", "9": "Tests rest-api state by submitting invalid \ntransactions with invalid address ", "10": "Tests rest-api state by submitting invalid \ntransactions with minimum address length ", "11": "Tests rest-api state by submitting invalid \ntransactions with maximum address length ", "12": "Tests rest-api state by submitting valid \ntransactions with invalid transactions", "13": "Tests rest-api state by submitting invalid \ntransactions with valid transactions", "14": "Tests rest-api state by submitting invalid \ntransactions with same transactions", "15": "Tests rest-api state by submitting invalid \ntransactions with commit transactions", "16": "Tests rest-api state by submitting invalid \ntransactions with invalid bad  address ", "17": "Tests rest-api state by submitting invalid \ntransactions with invalid family name"}, "setup": {"duration": 300.10669016838074, "outcome": "passed", "log": [{"name": "payload", "msg": "Creating intkey transactions with set operations", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 363, "funcName": "get_txns_commit_data", "created": 1552471396.143317, "msecs": 143.31698417663574, "relativeCreated": 4400743.636131287, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:33:16"}, {"name": "payload", "msg": "Creating batches for transactions 3trn/batch", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/ubuntu/Rest_tests_13Mar/sawtooth-core/rest_api/tests/api_test/payload.py", "filename": "payload.py", "module": "payload", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 381, "funcName": "get_txns_commit_data", "created": 1552471396.143625, "msecs": 143.62502098083496, "relativeCreated": 4400743.944168091, "thread": 139905230628672, "threadName": "MainThread", "processName": "MainProcess", "process": 26428, "asctime": "2019-03-13 15:33:16"}]}, "call": {"duration": 0.0006074905395507812, "outcome": "passed"}, "teardown": {"duration": 0.004840373992919922, "outcome": "passed"}}]}